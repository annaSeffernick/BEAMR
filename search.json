[{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://annaseffernick.github.io/BEAMR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://annaseffernick.github.io/BEAMR/articles/BEAMR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"BEAMR","text":"Bootstrap Evaluation Association Matrices (BEAMR) method integrate multiple forms omics data multiple clinical endpoints. BEAMR uses simple association models bootstrapping provide consolidated gene ranking using feature/endpoint associations. brief overview BEAMR. First, define sets link genomic features omic dataset “set”. set meaningful grouping features, gene, pathway, etc. Next, set, compute association estimate matrix (AEM), matrix regression coefficients univariate association models endpoint feature set. consider AEM point multivariate association estiamte space determine distance null point association (entries AEM=0). Finally, use bootstrap resampling determine observed set significantly different null. illustrated Figure 1.  vignette, describe use BEAMR package pediatric T-example dataset COG trial AALL0434 published Liu et al., 2017. dataset contains 265 patients, three clinical endpoints, two omics.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/articles/BEAMR.html","id":"the-data","dir":"Articles","previous_headings":"","what":"The Data","title":"BEAMR","text":"clinical data saved 𝚌𝚕𝚒𝚗𝚏\\texttt{clinf}. three clinical endpoints minimal residual disease measured Day 29 (MRD29), event-free survival (EFS), overall survival (OS). two omics datasets included . 𝙻𝚎𝚜𝚒𝚘𝚗\\texttt{Lesion} indicator matrix denoting presence absence lesion. 𝚁𝙽𝙰\\texttt{RNA} matrix gene expression.","code":"head(clinf) #>            ID MRD29 RNA.clm Lesion.clm Lesion.id RNA.id   EFS    OS #> PARASZ PARASZ 0.000  PARASZ     PARASZ    PARASZ PARASZ 3087+ 3087+ #> PARAYM PARAYM 0.000  PARAYM     PARAYM    PARAYM PARAYM 3399+ 3399+ #> PARCVM PARCVM 0.000  PARCVM     PARCVM    PARCVM PARCVM 2424+ 2424+ #> PAREGZ PAREGZ 0.490  PAREGZ     PAREGZ    PAREGZ PAREGZ 3087+ 3087+ #> PARFDL PARFDL 0.000  PARFDL     PARFDL    PARFDL PARFDL 3075+ 3075+ #> PARFIH PARFIH 0.028  PARFIH     PARFIH    PARFIH PARFIH 1099+ 1099+ omicdat$Lesion[1:5, 1:5] #>                          PARWNW PASXUC PATXNR PASYIS PATBGC #> ENSG00000264545_loss          1      1      1      1      0 #> ENSG00000147889_loss          1      1      1      1      0 #> ENSG00000224854_loss          1      1      1      1      0 #> ENSG00000148400_mutation      1      1      1      1      0 #> ENSG00000099810_loss          1      1      1      1      0 omicdat$RNA[1:5, 1:5] #>                    PARFIH     PARFPJ     PARFXJ     PARKLK     PARLJA #> ENSG00000121410 0.4976379 0.29994795 1.13973142 0.32584690 0.35940872 #> ENSG00000148584 0.0000000 0.00000000 0.00000000 0.00000000 0.00000000 #> ENSG00000175899 0.0176369 0.11316706 0.02913480 0.00992041 0.02672925 #> ENSG00000166535 0.0000000 0.02261638 0.01278318 0.01735184 0.00000000 #> ENSG00000184389 0.1067503 1.46126661 0.32734246 0.56042150 0.49385225"},{"path":"https://annaseffernick.github.io/BEAMR/articles/BEAMR.html","id":"prepare-beamr-data","dir":"Articles","previous_headings":"","what":"Prepare BEAMR Data","title":"BEAMR","text":"use BEAMR, need data specific format. can accomplished prep_beam_data() function. addition clinical omics data, function also requires omic annotation set data input. omics annotation id gene columns. set data input contains mapping omics features sets. data.frame columns “set.id”, “mtx”, “row.id”. “set.id” name set, Ensembl ID example. “mtx” defines omic type (e.g., “Lesion” “RNA”). “row.id” feature name, must element rownames omics matrices. components, can now call prep_beam_data(). also specify number bootstrap replicates “n.boot” arguement can set seed reproducibility. output beam.data object, list main.data (clinf), mtx.data (omicdat), mtx.anns (omicann), anns.mtch (summary omic annotation), set.data (setdat), set.anns, boot.index (indices bootstrap resamples). calculating association estimate matrix, need specify models fit. “beam.specs” can generated automatically using prep_beam_specs(). function defines model form based endpoint type. 𝚏𝚒𝚛𝚝𝚑=𝚃𝚁𝚄𝙴\\texttt{firth=TRUE} option uses Firth penalized Cox models useful presence rare events omics. Users may also specify models entering optional “endptmdl” argument, data.frame string columns called “endpt” “mdl”.","code":"head(omicann$Lesion) #>                         id            gene #> 1     ENSG00000264545_loss ENSG00000264545 #> 2     ENSG00000147889_loss ENSG00000147889 #> 3     ENSG00000224854_loss ENSG00000224854 #> 4 ENSG00000148400_mutation ENSG00000148400 #> 5     ENSG00000099810_loss ENSG00000099810 #> 6     ENSG00000264801_loss ENSG00000264801 head(omicann$RNA) #>                id            gene #> 1 ENSG00000121410 ENSG00000121410 #> 2 ENSG00000148584 ENSG00000148584 #> 3 ENSG00000175899 ENSG00000175899 #> 4 ENSG00000166535 ENSG00000166535 #> 5 ENSG00000184389 ENSG00000184389 #> 6 ENSG00000128274 ENSG00000128274 head(setdat) #>            set.id mtx.id          row.id #> 1 ENSG00000121410    RNA ENSG00000121410 #> 2 ENSG00000148584    RNA ENSG00000148584 #> 3 ENSG00000175899    RNA ENSG00000175899 #> 4 ENSG00000166535    RNA ENSG00000166535 #> 5 ENSG00000184389    RNA ENSG00000184389 #> 6 ENSG00000128274    RNA ENSG00000128274 beam.data <- prep_beam_data(main.data=clinf, mtx.data=omicdat,                             mtx.anns=omicann, set.data=setdat,                             set.anns=NULL, n.boot=10, seed=123) #> Checking inputs: Mon Jul 22 13:53:15 2024 #>   Checking that each element of mtx.data is a matrix: Mon Jul 22 13:53:15 2024 #>   Checking that each element of mtx.anns is a data.frame: Mon Jul 22 13:53:15 2024 #> Aligning main.data with each mtx.data: Mon Jul 22 13:53:15 2024 #>   Working on mtx.data Lesion (1 of 2): Mon Jul 22 13:53:15 2024 #>   Working on mtx.data RNA (2 of 2): Mon Jul 22 13:53:15 2024 #> Warning in get_id_index(main.data, mtx.clms): Some ids not matched; returning #> NAs for those. #>   Working on mtx.anns: Mon Jul 22 13:53:15 2024 #>   Matching matrix 1 with annotations: Mon Jul 22 13:53:15 2024 #>   Matching matrix 2 with annotations: Mon Jul 22 13:53:15 2024 #>   Checking set.data: Mon Jul 22 13:53:15 2024 #>     Ordering and indexing set.data: Mon Jul 22 13:53:15 2024 #>     Checking section 1 of 40 of set.data: Mon Jul 22 13:53:15 2024 #> Generating bootstrap index matrix: Mon Jul 22 13:53:15 2024 #> Packaging and returning result: Mon Jul 22 13:53:15 2024 beam.data #> main.data: 265 rows and 8 columns.  #>   #>            ID MRD29 RNA.clm Lesion.clm Lesion.id #> PARASZ PARASZ  0.00      46         21    PARASZ #> PARAYM PARAYM  0.00      47        108    PARAYM #> PARCVM PARCVM  0.00      15         84    PARCVM #> PAREGZ PAREGZ  0.49     170        142    PAREGZ #> PARFDL PARFDL  0.00     184        175    PARFDL #>  #> mtx.data:  #>   mtx.data Lesion: 265 columns linked to 265 rows of main.data.  #>   mtx.data RNA: 264 columns linked to 264 rows of main.data.  #>  #> Lesion:  #>                          PARWNW PASXUC PATXNR PASYIS PATBGC #> ENSG00000264545_loss          1      1      1      1      0 #> ENSG00000147889_loss          1      1      1      1      0 #> ENSG00000224854_loss          1      1      1      1      0 #> ENSG00000148400_mutation      1      1      1      1      0 #> ENSG00000099810_loss          1      1      1      1      0 #>  #> RNA:  #>                    PARFIH     PARFPJ     PARFXJ     PARKLK     PARLJA #> ENSG00000121410 0.4976379 0.29994795 1.13973142 0.32584690 0.35940872 #> ENSG00000148584 0.0000000 0.00000000 0.00000000 0.00000000 0.00000000 #> ENSG00000175899 0.0176369 0.11316706 0.02913480 0.00992041 0.02672925 #> ENSG00000166535 0.0000000 0.02261638 0.01278318 0.01735184 0.00000000 #> ENSG00000184389 0.1067503 1.46126661 0.32734246 0.56042150 0.49385225 #>  #> mtx.anns:  #>   Lesion: 20 rows and 2 columns.  #>   RNA: 20 rows and 2 columns.  #>  #> Lesion:  #>                         id            gene #> 1     ENSG00000264545_loss ENSG00000264545 #> 2     ENSG00000147889_loss ENSG00000147889 #> 3     ENSG00000224854_loss ENSG00000224854 #> 4 ENSG00000148400_mutation ENSG00000148400 #> 5     ENSG00000099810_loss ENSG00000099810 #>  #> RNA:  #>                id            gene #> 1 ENSG00000121410 ENSG00000121410 #> 2 ENSG00000148584 ENSG00000148584 #> 3 ENSG00000175899 ENSG00000175899 #> 4 ENSG00000166535 ENSG00000166535 #> 5 ENSG00000184389 ENSG00000184389 #>  #> anns.mtch:  #>   mtx.data mtx.anns id.clm nrow.mtx nrow.ann nrow.map #> 1   Lesion   Lesion     id       20       20       20 #> 2      RNA      RNA     id       20       20       20 #>  #> set.data: 40 rows assigning sets to data.mtx rows.  #>             set.id mtx.id               row.id #> 9  ENSG00000081760    RNA      ENSG00000081760 #> 8  ENSG00000094914    RNA      ENSG00000094914 #> 25 ENSG00000099810 Lesion ENSG00000099810_loss #> 19 ENSG00000099810    RNA      ENSG00000099810 #> 14 ENSG00000109576    RNA      ENSG00000109576 #> 10 ENSG00000114771    RNA      ENSG00000114771 #>  #>   #> set.anns:  rows of set annotations. #>   #> boot.index: 11 rows and 265 columns of bootstrap indices.  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    2    3    4    5 #> [2,]  179   14  195  118  229 #> [3,]  108    8  114  261   29 #> [4,]   55   19  241  218  155 #> [5,]  145  200  211   69   46 beam.specs <- prep_beam_specs(beam.data=beam.data, endpts=c(\"MRD29\", \"OS\", \"EFS\"), firth=TRUE) #> MRD29 is continuous, fitting lm #> OS is survival endpoint, fitting coxphf2 #> EFS is survival endpoint, fitting coxphf2 beam.specs #>           name    mtx                                         mdl #> 1 Lesion.MRD29 Lesion    lm(MRD29~mtx.row,data=main.data,model=T) #> 2    RNA.MRD29    RNA    lm(MRD29~mtx.row,data=main.data,model=T) #> 3    Lesion.OS Lesion  coxphf2(OS~mtx.row,data=main.data,model=T) #> 4       RNA.OS    RNA  coxphf2(OS~mtx.row,data=main.data,model=T) #> 5   Lesion.EFS Lesion coxphf2(EFS~mtx.row,data=main.data,model=T) #> 6      RNA.EFS    RNA coxphf2(EFS~mtx.row,data=main.data,model=T)"},{"path":"https://annaseffernick.github.io/BEAMR/articles/BEAMR.html","id":"calculate-association-statistics","dir":"Articles","previous_headings":"","what":"Calculate Association Statistics","title":"BEAMR","text":"beam.data beam.specs can now calculate association statistics omics endpoints original data included bootstrap resamples. can take long time depending size data, natural place parallelize computing statistics original data bootstrap dataset separately recombining.","code":"beam.stats <- compute_beam_stats(beam.data=beam.data, beam.specs=beam.specs) #> Working on analysis 1 of 6 : Mon Jul 22 13:53:16 2024 #> Lesionlm(MRD29~mtx.row,data=main.data,model=T) #>   Working on bootstrap 0 of 11 : Mon Jul 22 13:53:16 2024 #>   Working on bootstrap 10 of 11 : Mon Jul 22 13:53:16 2024 #> Working on analysis 2 of 6 : Mon Jul 22 13:53:16 2024 #> RNAlm(MRD29~mtx.row,data=main.data,model=T) #>   Working on bootstrap 0 of 11 : Mon Jul 22 13:53:16 2024 #>   Working on bootstrap 10 of 11 : Mon Jul 22 13:53:16 2024 #> Working on analysis 3 of 6 : Mon Jul 22 13:53:16 2024 #> Lesioncoxphf2(OS~mtx.row,data=main.data,model=T) #>   Working on bootstrap 0 of 11 : Mon Jul 22 13:53:16 2024 #>   Working on bootstrap 10 of 11 : Mon Jul 22 13:53:31 2024 #> Working on analysis 4 of 6 : Mon Jul 22 13:53:32 2024 #> RNAcoxphf2(OS~mtx.row,data=main.data,model=T) #>   Working on bootstrap 0 of 11 : Mon Jul 22 13:53:32 2024 #>   Working on bootstrap 10 of 11 : Mon Jul 22 13:53:48 2024 #> Working on analysis 5 of 6 : Mon Jul 22 13:53:50 2024 #> Lesioncoxphf2(EFS~mtx.row,data=main.data,model=T) #>   Working on bootstrap 0 of 11 : Mon Jul 22 13:53:50 2024 #>   Working on bootstrap 10 of 11 : Mon Jul 22 13:54:05 2024 #> Working on analysis 6 of 6 : Mon Jul 22 13:54:06 2024 #> RNAcoxphf2(EFS~mtx.row,data=main.data,model=T) #>   Working on bootstrap 0 of 11 : Mon Jul 22 13:54:06 2024 #>   Working on bootstrap 10 of 11 : Mon Jul 22 13:54:24 2024 beam.stats #> Contains 6 association estimate matrices with 10 bootstraps:  #>   Association Estimate Matrix of Lesion with MRD29 has dimensions 20 x 11.  #>   Association Estimate Matrix of RNA with MRD29 has dimensions 20 x 11.  #>   Association Estimate Matrix of Lesion with OS has dimensions 20 x 11.  #>   Association Estimate Matrix of RNA with OS has dimensions 20 x 11.  #>   Association Estimate Matrix of Lesion with EFS has dimensions 20 x 11.  #>   Association Estimate Matrix of RNA with EFS has dimensions 20 x 11.  #>  #> Example Association Estimate Matrix for Lesion with MRD29:  #>                               boot_0      boot_1      boot_2      boot_3 #> ENSG00000264545_loss     -0.19093600 -0.18285072 -0.21417250 -0.20583809 #> ENSG00000147889_loss     -0.19931154 -0.17555327 -0.20297360 -0.19104882 #> ENSG00000224854_loss     -0.18613078 -0.17555327 -0.21375800 -0.18794477 #> ENSG00000148400_mutation -0.02983458 -0.03084684  0.05543433 -0.01137685 #> ENSG00000099810_loss     -0.13672414 -0.12616440 -0.16711568 -0.11536782 #>                                boot_4 #> ENSG00000264545_loss     -0.156257583 #> ENSG00000147889_loss     -0.210577002 #> ENSG00000224854_loss     -0.163050513 #> ENSG00000148400_mutation -0.001250098 #> ENSG00000099810_loss     -0.090666306 #>  #> Example Association Estimate Matrix for RNA with MRD29:  #>                       boot_0       boot_1      boot_2       boot_3      boot_4 #> ENSG00000121410  0.045547007  0.004894953  0.11539090  0.091368164  0.12737124 #> ENSG00000148584 -0.043899068 -0.027183517 -0.03688248 -0.066976684 -0.06705541 #> ENSG00000175899  0.071592760  0.035710522  0.08890343  0.060304200  0.04032931 #> ENSG00000166535  0.000296431 -0.011542505 -0.07000542  0.003024411  0.03280950 #> ENSG00000184389  0.088934788  0.053931057  0.12269236  0.205216952  0.11770464 #>  #> Example Association Estimate Matrix for Lesion with OS:  #>                              boot_0     boot_1     boot_2       boot_3 #> ENSG00000264545_loss      0.8932939 0.82087274  0.7774685  1.007661292 #> ENSG00000147889_loss      0.9489993 0.84854596  0.8068623  1.045121725 #> ENSG00000224854_loss      0.9563505 0.84854596  0.8400789  1.095728463 #> ENSG00000148400_mutation -0.0989406 0.04244735  0.1444102 -0.081025546 #> ENSG00000099810_loss      0.3328451 0.53394399 -0.1096147  0.003899453 #>                               boot_4 #> ENSG00000264545_loss     1.116271049 #> ENSG00000147889_loss     1.172808630 #> ENSG00000224854_loss     1.139336521 #> ENSG00000148400_mutation 0.008572771 #> ENSG00000099810_loss     0.583670072 #>  #> Example Association Estimate Matrix for RNA with OS:  #>                      boot_0      boot_1      boot_2      boot_3       boot_4 #> ENSG00000121410 -0.06064136  0.08833406  0.19740235 -0.23032144  0.042520410 #> ENSG00000148584  0.05061313  0.19634699  0.13935280 -0.04349620 -0.308207853 #> ENSG00000175899  0.02594285  0.03512339  0.06672908 -0.11478157 -0.057850041 #> ENSG00000166535 -0.09119894 -0.16775731 -0.97860178 -0.05163522  0.036242601 #> ENSG00000184389 -0.13155891 -0.34544421 -0.27764175 -0.10397644  0.009883494 #>  #> Example Association Estimate Matrix for Lesion with EFS:  #>                                boot_0      boot_1       boot_2      boot_3 #> ENSG00000264545_loss      0.311047946 0.192434740 -0.027644863  0.45783281 #> ENSG00000147889_loss      0.355335350 0.212469747 -0.005443877  0.49058097 #> ENSG00000224854_loss      0.358707580 0.212469747  0.010605097  0.52911969 #> ENSG00000148400_mutation -0.008535379 0.101993852 -0.185038910 -0.09593391 #> ENSG00000099810_loss     -0.015810223 0.006761143 -0.488404478 -0.18680785 #>                             boot_4 #> ENSG00000264545_loss     0.6079674 #> ENSG00000147889_loss     0.6584991 #> ENSG00000224854_loss     0.6237131 #> ENSG00000148400_mutation 0.1068464 #> ENSG00000099810_loss     0.2182788 #>  #> Example Association Estimate Matrix for RNA with EFS:  #>                      boot_0     boot_1      boot_2     boot_3      boot_4 #> ENSG00000121410  0.05921417  0.1825319  0.34583467  0.1120400  0.07337122 #> ENSG00000148584  0.17012792  0.2792833  0.35866190  0.2208551 -0.50231550 #> ENSG00000175899 -0.11536335 -0.1158022 -0.02586119 -5.6659243 -3.05803752 #> ENSG00000166535  0.24454397  0.3871298  0.45451663  0.2155649  0.19137130 #> ENSG00000184389 -0.13690629 -0.2247154 -0.12818200 -0.2024793 -0.02224107 #>  #> Example Endpoint Data:  #>        MRD29   EFS    OS #> PARASZ  0.00 3087+ 3087+ #> PARAYM  0.00 3399+ 3399+ #> PARCVM  0.00 2424+ 2424+ #> PAREGZ  0.49 3087+ 3087+ #> PARFDL  0.00 3075+ 3075+ #>  #> BEAM Model Specifications:  #>           name    mtx                                         mdl #> 1 Lesion.MRD29 Lesion    lm(MRD29~mtx.row,data=main.data,model=T) #> 2    RNA.MRD29    RNA    lm(MRD29~mtx.row,data=main.data,model=T) #> 3    Lesion.OS Lesion  coxphf2(OS~mtx.row,data=main.data,model=T) #> 4       RNA.OS    RNA  coxphf2(OS~mtx.row,data=main.data,model=T) #> 5   Lesion.EFS Lesion coxphf2(EFS~mtx.row,data=main.data,model=T) #> 6      RNA.EFS    RNA coxphf2(EFS~mtx.row,data=main.data,model=T) #>  #> BEAM data used to create Association Estimate Matrices:  #> main.data: 265 rows and 8 columns.  #>   #>            ID MRD29 RNA.clm Lesion.clm Lesion.id #> PARASZ PARASZ  0.00      46         21    PARASZ #> PARAYM PARAYM  0.00      47        108    PARAYM #> PARCVM PARCVM  0.00      15         84    PARCVM #> PAREGZ PAREGZ  0.49     170        142    PAREGZ #> PARFDL PARFDL  0.00     184        175    PARFDL #>  #> mtx.data:  #>   mtx.data Lesion: 265 columns linked to 265 rows of main.data.  #>   mtx.data RNA: 264 columns linked to 264 rows of main.data.  #>  #> Lesion:  #>                          PARWNW PASXUC PATXNR PASYIS PATBGC #> ENSG00000264545_loss          1      1      1      1      0 #> ENSG00000147889_loss          1      1      1      1      0 #> ENSG00000224854_loss          1      1      1      1      0 #> ENSG00000148400_mutation      1      1      1      1      0 #> ENSG00000099810_loss          1      1      1      1      0 #>  #> RNA:  #>                    PARFIH     PARFPJ     PARFXJ     PARKLK     PARLJA #> ENSG00000121410 0.4976379 0.29994795 1.13973142 0.32584690 0.35940872 #> ENSG00000148584 0.0000000 0.00000000 0.00000000 0.00000000 0.00000000 #> ENSG00000175899 0.0176369 0.11316706 0.02913480 0.00992041 0.02672925 #> ENSG00000166535 0.0000000 0.02261638 0.01278318 0.01735184 0.00000000 #> ENSG00000184389 0.1067503 1.46126661 0.32734246 0.56042150 0.49385225 #>  #> mtx.anns:  #>   Lesion: 20 rows and 2 columns.  #>   RNA: 20 rows and 2 columns.  #>  #> Lesion:  #>                         id            gene #> 1     ENSG00000264545_loss ENSG00000264545 #> 2     ENSG00000147889_loss ENSG00000147889 #> 3     ENSG00000224854_loss ENSG00000224854 #> 4 ENSG00000148400_mutation ENSG00000148400 #> 5     ENSG00000099810_loss ENSG00000099810 #>  #> RNA:  #>                id            gene #> 1 ENSG00000121410 ENSG00000121410 #> 2 ENSG00000148584 ENSG00000148584 #> 3 ENSG00000175899 ENSG00000175899 #> 4 ENSG00000166535 ENSG00000166535 #> 5 ENSG00000184389 ENSG00000184389 #>  #> anns.mtch:  #>   mtx.data mtx.anns id.clm nrow.mtx nrow.ann nrow.map #> 1   Lesion   Lesion     id       20       20       20 #> 2      RNA      RNA     id       20       20       20 #>  #> set.data: 40 rows assigning sets to data.mtx rows.  #>             set.id mtx.id               row.id #> 9  ENSG00000081760    RNA      ENSG00000081760 #> 8  ENSG00000094914    RNA      ENSG00000094914 #> 25 ENSG00000099810 Lesion ENSG00000099810_loss #> 19 ENSG00000099810    RNA      ENSG00000099810 #> 14 ENSG00000109576    RNA      ENSG00000109576 #> 10 ENSG00000114771    RNA      ENSG00000114771 #>  #>   #> set.anns:  rows of set annotations. #>   #> boot.index: 11 rows and 265 columns of bootstrap indices.  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    2    3    4    5 #> [2,]  179   14  195  118  229 #> [3,]  108    8  114  261   29 #> [4,]   55   19  241  218  155 #> [5,]  145  200  211   69   46"},{"path":"https://annaseffernick.github.io/BEAMR/articles/BEAMR.html","id":"calculate-set-and-feature-level-p-values","dir":"Articles","previous_headings":"","what":"Calculate Set and Feature-Level P-Values","title":"BEAMR","text":"Now can use beam.stats find set feature-level p-values. Set-level p-values: default, BEAMR set p-values integration available omics endpoints. result list, BEAMR p-values “set.pvals” entry. Example results: compute_feature_pvalues() function returns list omics/endpoint pair univariate associations omics features. Example results:","code":"set.pvals <- compute_set_pvalues(beam.stats) #> Preparing bootstrap results for calculating feature set p-values: Mon Jul 22 13:54:26 2024 #> Finding stats for each data matrix:Mon Jul 22 13:54:26 2024 #>   Finding stats for data matrix Lesion: Mon Jul 22 13:54:26 2024 #>    Finding features with with Lesion.MRD29 stats: Mon Jul 22 13:54:26 2024 #>    Finding features with with Lesion.OS stats: Mon Jul 22 13:54:26 2024 #>    Finding features with with Lesion.EFS stats: Mon Jul 22 13:54:26 2024 #>   Finding stats for data matrix RNA: Mon Jul 22 13:54:26 2024 #>    Finding features with with RNA.MRD29 stats: Mon Jul 22 13:54:26 2024 #>    Finding features with with RNA.OS stats: Mon Jul 22 13:54:26 2024 #>    Finding features with with RNA.EFS stats: Mon Jul 22 13:54:26 2024 #> Found 120 rows of stats: Mon Jul 22 13:54:26 2024 #> Merging stats with feature-sets: Mon Jul 22 13:54:26 2024 #> Merged feature-set stat rows: 120 #> Ordering and indexing feature sets: Mon Jul 22 13:54:26 2024 #>   Cleaning up beam.stat matrices:Mon Jul 22 13:54:26 2024 #>    Working on matrix 1 of 6: Mon Jul 22 13:54:26 2024 #>    Working on matrix 2 of 6: Mon Jul 22 13:54:26 2024 #>    Working on matrix 3 of 6: Mon Jul 22 13:54:26 2024 #>    Working on matrix 4 of 6: Mon Jul 22 13:54:26 2024 #>    Working on matrix 5 of 6: Mon Jul 22 13:54:26 2024 #>    Working on matrix 6 of 6: Mon Jul 22 13:54:26 2024 #> Computing p-value for feature set 1 of 34: Mon Jul 22 13:54:26 2024 #> 13ENSG00000081760 #> Computing p-value for feature set 26 of 34: Mon Jul 22 13:54:26 2024 #> 9496ENSG00000229835 #> Finished computing p-values at: Mon Jul 22 13:54:26 2024 #> Minimum q-value is 0.106439437831269 #> Creating set p-value data frame. #> Done creating data frame. #> Creating list for output. head(set.pvals$set.pvals) #>            set.id #> 1 ENSG00000081760 #> 2 ENSG00000094914 #> 3 ENSG00000099810 #> 4 ENSG00000109576 #> 5 ENSG00000114771 #> 6 ENSG00000118017 #>                                                                           features #> 1                                               1 RNA.EFS | 1 RNA.MRD29 | 1 RNA.OS #> 2                                               1 RNA.EFS | 1 RNA.MRD29 | 1 RNA.OS #> 3 1 Lesion.EFS | 1 Lesion.MRD29 | 1 Lesion.OS | 1 RNA.EFS | 1 RNA.MRD29 | 1 RNA.OS #> 4                                               1 RNA.EFS | 1 RNA.MRD29 | 1 RNA.OS #> 5                                               1 RNA.EFS | 1 RNA.MRD29 | 1 RNA.OS #> 6                                               1 RNA.EFS | 1 RNA.MRD29 | 1 RNA.OS #>   mean.from.center origin.to.center distance.ratio      p.set     q.set #> 1              2.7        23.261819      8.6154884 0.02970528 0.1112937 #> 2              2.7         1.686417      0.6245987 0.40000000 0.2676141 #> 3              5.4         8.594254      1.5915285 0.30000000 0.2554498 #> 4              2.7         7.262608      2.6898548 0.10000000 0.1440999 #> 5              2.7        39.518499     14.6364811 0.01704578 0.1064394 #> 6              2.7         2.397169      0.8878403 0.40000000 0.2676141 feat.pvals <- compute_feature_pvalues(beam.stats) #> Computing feature p-values for stat matrix 1 of 6: Mon Jul 22 13:54:26 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 2 of 6: Mon Jul 22 13:54:26 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 3 of 6: Mon Jul 22 13:54:26 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 4 of 6: Mon Jul 22 13:54:26 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 5 of 6: Mon Jul 22 13:54:26 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 6 of 6: Mon Jul 22 13:54:26 2024 #>   This matrix has 20 features. names(feat.pvals) #> [1] \"Lesion.MRD29\" \"RNA.MRD29\"    \"Lesion.OS\"    \"RNA.OS\"       \"Lesion.EFS\"   #> [6] \"RNA.EFS\" head(feat.pvals$RNA.EFS) #>                id            gene       beta         p         q #> 1 ENSG00000081760 ENSG00000081760 0.39512059 0.1666667 0.1969697 #> 2 ENSG00000094914 ENSG00000094914 0.16586489 0.3333333 0.2888889 #> 3 ENSG00000099810 ENSG00000099810 0.42230413 0.1666667 0.1969697 #> 4 ENSG00000109576 ENSG00000109576 0.08833319 0.5000000 0.3823529 #> 5 ENSG00000114771 ENSG00000114771 0.14483645 0.1666667 0.1969697 #> 6 ENSG00000118017 ENSG00000118017 0.30517260 0.1666667 0.1969697"},{"path":"https://annaseffernick.github.io/BEAMR/articles/BEAMR.html","id":"subset-the-results","dir":"Articles","previous_headings":"","what":"Subset the Results","title":"BEAMR","text":"large data, beam.stats result file might large, large open local machine. One option filter results file, needed evaluate results plot. subset_beam_result() file allows filtering based many different criteria, specify list fo features, vector set.ids, vector endpoints, vector omics, set feature-level p/q-value limits. option ot use intersection union specified criteria. Additionally, set-level p-values can optionally recalculated, done number omics endpoints changes. example filters beam.stats object sets top ten smallest set-level q-values.","code":"beam.stats.filt <- subset_beam_result(beam.stats, set.pvals, feat.pvals, endpts=NULL,                                       q.limit=10, intersect=TRUE, recalc=FALSE) #>   Working on mtx.anns: Mon Jul 22 13:54:26 2024 #>   Matching matrix 1 with annotations: Mon Jul 22 13:54:26 2024 #>   Matching matrix 2 with annotations: Mon Jul 22 13:54:26 2024 #> Computing feature p-values for stat matrix 1 of 6: Mon Jul 22 13:54:26 2024 #>   This matrix has 6 features. #> Computing feature p-values for stat matrix 2 of 6: Mon Jul 22 13:54:26 2024 #>   This matrix has 7 features. #> Computing feature p-values for stat matrix 3 of 6: Mon Jul 22 13:54:26 2024 #>   This matrix has 6 features. #> Computing feature p-values for stat matrix 4 of 6: Mon Jul 22 13:54:26 2024 #>   This matrix has 7 features. #> Computing feature p-values for stat matrix 5 of 6: Mon Jul 22 13:54:26 2024 #>   This matrix has 6 features. #> Computing feature p-values for stat matrix 6 of 6: Mon Jul 22 13:54:26 2024 #>   This matrix has 7 features. #> Computing feature p-values for stat matrix 1 of 6: Mon Jul 22 13:54:26 2024 #>   This matrix has 6 features. #> Computing feature p-values for stat matrix 2 of 6: Mon Jul 22 13:54:26 2024 #>   This matrix has 7 features. #> Computing feature p-values for stat matrix 3 of 6: Mon Jul 22 13:54:26 2024 #>   This matrix has 6 features. #> Computing feature p-values for stat matrix 4 of 6: Mon Jul 22 13:54:26 2024 #>   This matrix has 7 features. #> Computing feature p-values for stat matrix 5 of 6: Mon Jul 22 13:54:26 2024 #>   This matrix has 6 features. #> Computing feature p-values for stat matrix 6 of 6: Mon Jul 22 13:54:26 2024 #>   This matrix has 7 features. beam.stats.filt #> $beam.stats #> Contains 6 association estimate matrices with 10 bootstraps:  #>   Association Estimate Matrix of Lesion with MRD29 has dimensions 6 x 11.  #>   Association Estimate Matrix of RNA with MRD29 has dimensions 7 x 11.  #>   Association Estimate Matrix of Lesion with OS has dimensions 6 x 11.  #>   Association Estimate Matrix of RNA with OS has dimensions 7 x 11.  #>   Association Estimate Matrix of Lesion with EFS has dimensions 6 x 11.  #>   Association Estimate Matrix of RNA with EFS has dimensions 7 x 11.  #>  #> Example Association Estimate Matrix for Lesion with MRD29:  #>                           boot_0     boot_1     boot_2      boot_3      boot_4 #> ENSG00000264545_loss -0.19093600 -0.1828507 -0.2141725 -0.20583809 -0.15625758 #> ENSG00000147889_loss -0.19931154 -0.1755533 -0.2029736 -0.19104882 -0.21057700 #> ENSG00000224854_loss -0.18613078 -0.1755533 -0.2137580 -0.18794477 -0.16305051 #> ENSG00000264801_loss -0.13821656 -0.1239665 -0.1639224 -0.11055410 -0.09439548 #> ENSG00000266446_loss -0.09222371 -0.0775523 -0.1134355 -0.06947515 -0.07033315 #>  #> Example Association Estimate Matrix for RNA with MRD29:  #>                      boot_0       boot_1       boot_2       boot_3      boot_4 #> ENSG00000128274  0.08720496  0.109390028  0.044897331  0.121861752  0.09987658 #> ENSG00000081760 -0.03607313  0.034956223 -0.089175927  0.081705062 -0.06983956 #> ENSG00000114771  0.07002589  0.099323229  0.001406326  0.070103099  0.09474937 #> ENSG00000109576 -0.12047921 -0.134490811 -0.099232706 -0.120472858 -0.12181346 #> ENSG00000224854  0.04198742 -0.002051417  0.007657997  0.002145128  0.04635030 #>  #> Example Association Estimate Matrix for Lesion with OS:  #>                         boot_0    boot_1     boot_2     boot_3    boot_4 #> ENSG00000264545_loss 0.8932939 0.8208727  0.7774685 1.00766129 1.1162710 #> ENSG00000147889_loss 0.9489993 0.8485460  0.8068623 1.04512173 1.1728086 #> ENSG00000224854_loss 0.9563505 0.8485460  0.8400789 1.09572846 1.1393365 #> ENSG00000264801_loss 0.3681696 0.6134522 -0.1043398 0.04148775 0.6138597 #> ENSG00000266446_loss 0.5760150 0.8063569  0.1638686 0.92763980 0.6092065 #>  #> Example Association Estimate Matrix for RNA with OS:  #>                     boot_0      boot_1    boot_2     boot_3     boot_4 #> ENSG00000128274 0.16197577  0.09668843 0.1557670 0.23429709  0.2197898 #> ENSG00000081760 0.07025600  0.25418477 0.4471904 0.09829159  0.1214861 #> ENSG00000114771 0.15584991  0.14674332 0.2083145 0.16427747  0.1169206 #> ENSG00000109576 0.09189032 -0.57119111 0.2057833 0.13147781  0.2651223 #> ENSG00000224854 0.06835618  0.30907085 0.2299027 0.22839346 -0.1334088 #>  #> Example Association Estimate Matrix for Lesion with EFS:  #>                          boot_0     boot_1       boot_2     boot_3    boot_4 #> ENSG00000264545_loss 0.31104795 0.19243474 -0.027644863  0.4578328 0.6079674 #> ENSG00000147889_loss 0.35533535 0.21246975 -0.005443877  0.4905810 0.6584991 #> ENSG00000224854_loss 0.35870758 0.21246975  0.010605097  0.5291197 0.6237131 #> ENSG00000264801_loss 0.01296298 0.06564000 -0.482688007 -0.1595180 0.2405010 #> ENSG00000266446_loss 0.13131513 0.09748747 -0.014785146  0.3507272 0.3510419 #>  #> Example Association Estimate Matrix for RNA with EFS:  #>                      boot_0      boot_1      boot_2     boot_3      boot_4 #> ENSG00000128274  0.20296851  0.44949340  0.22461005 0.05788957  0.07440748 #> ENSG00000081760  0.40551255  0.48707882  0.45943021 0.38063298  0.34116921 #> ENSG00000114771  0.13935591  0.11748291  0.13784936 0.12321800  0.13015927 #> ENSG00000109576  0.09502053 -0.16961948  0.01397912 0.07915553  0.19728078 #> ENSG00000224854 -0.03123313  0.07555118 -0.03490088 0.07155310 -0.17750700 #>  #> Example Endpoint Data:  #>        MRD29   EFS    OS #> PARASZ  0.00 3087+ 3087+ #> PARAYM  0.00 3399+ 3399+ #> PARCVM  0.00 2424+ 2424+ #> PAREGZ  0.49 3087+ 3087+ #> PARFDL  0.00 3075+ 3075+ #>  #> BEAM Model Specifications:  #>           name    mtx                                         mdl #> 1 Lesion.MRD29 Lesion    lm(MRD29~mtx.row,data=main.data,model=T) #> 2    RNA.MRD29    RNA    lm(MRD29~mtx.row,data=main.data,model=T) #> 3    Lesion.OS Lesion  coxphf2(OS~mtx.row,data=main.data,model=T) #> 4       RNA.OS    RNA  coxphf2(OS~mtx.row,data=main.data,model=T) #> 5   Lesion.EFS Lesion coxphf2(EFS~mtx.row,data=main.data,model=T) #> 6      RNA.EFS    RNA coxphf2(EFS~mtx.row,data=main.data,model=T) #>  #> BEAM data used to create Association Estimate Matrices:  #> main.data: 265 rows and 8 columns.  #>   #>            ID MRD29 RNA.clm Lesion.clm Lesion.id #> PARASZ PARASZ  0.00      46         21    PARASZ #> PARAYM PARAYM  0.00      47        108    PARAYM #> PARCVM PARCVM  0.00      15         84    PARCVM #> PAREGZ PAREGZ  0.49     170        142    PAREGZ #> PARFDL PARFDL  0.00     184        175    PARFDL #>  #> mtx.data:  #>   mtx.data Lesion: 265 columns linked to 265 rows of main.data.  #>   mtx.data RNA: 264 columns linked to 264 rows of main.data.  #>  #> Lesion:  #>                      PARWNW PASXUC PATXNR PASYIS PATBGC #> ENSG00000264545_loss      1      1      1      1      0 #> ENSG00000147889_loss      1      1      1      1      0 #> ENSG00000224854_loss      1      1      1      1      0 #> ENSG00000264801_loss      1      1      1      1      0 #> ENSG00000266446_loss      1      1      1      0      0 #>  #> RNA:  #>                     PARFIH    PARFPJ    PARFXJ     PARKLK    PARLJA #> ENSG00000128274 0.05672224 0.4579619 0.2620723 0.02147973 0.1392075 #> ENSG00000081760 1.35366204 1.6374711 1.4004286 1.72334012 1.2025118 #> ENSG00000114771 0.00000000 0.0000000 0.0000000 0.00000000 0.0000000 #> ENSG00000109576 2.15911246 0.2559237 2.1404842 0.92850298 1.3338817 #> ENSG00000224854 0.00000000 0.1323794 0.0000000 0.00000000 0.0000000 #>  #> mtx.anns:  #>   Lesion: 6 rows and 2 columns.  #>   RNA: 7 rows and 2 columns.  #>  #> Lesion:  #>                     id            gene #> 1 ENSG00000264545_loss ENSG00000264545 #> 2 ENSG00000147889_loss ENSG00000147889 #> 3 ENSG00000224854_loss ENSG00000224854 #> 6 ENSG00000264801_loss ENSG00000264801 #> 9 ENSG00000266446_loss ENSG00000266446 #>  #> RNA:  #>                 id            gene #> 6  ENSG00000128274 ENSG00000128274 #> 9  ENSG00000081760 ENSG00000081760 #> 10 ENSG00000114771 ENSG00000114771 #> 14 ENSG00000109576 ENSG00000109576 #> 15 ENSG00000224854 ENSG00000224854 #>  #> anns.mtch:  #>   mtx.data mtx.anns id.clm nrow.mtx nrow.ann nrow.map #> 1   Lesion   Lesion     id        6        6        6 #> 2      RNA      RNA     id        7        7        7 #>  #> set.data: 13 rows assigning sets to data.mtx rows.  #>             set.id mtx.id               row.id #> 9  ENSG00000081760    RNA      ENSG00000081760 #> 14 ENSG00000109576    RNA      ENSG00000109576 #> 10 ENSG00000114771    RNA      ENSG00000114771 #> 6  ENSG00000128274    RNA      ENSG00000128274 #> 30 ENSG00000147883 Lesion ENSG00000147883_loss #> 17 ENSG00000147883    RNA      ENSG00000147883 #>  #>   #> set.anns:  rows of set annotations. #>   #> boot.index: 11 rows and 265 columns of bootstrap indices.  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    2    3    4    5 #> [2,]  179   14  195  118  229 #> [3,]  108    8  114  261   29 #> [4,]   55   19  241  218  155 #> [5,]  145  200  211   69   46 #>  #> $beam.set.pvals #> $beam.set.pvals$set.pvals #>             set.id #> 1  ENSG00000081760 #> 4  ENSG00000109576 #> 5  ENSG00000114771 #> 8  ENSG00000128274 #> 9  ENSG00000147883 #> 10 ENSG00000147889 #> 23 ENSG00000224854 #> 30 ENSG00000264545 #> 31 ENSG00000264801 #> 33 ENSG00000266446 #>                                                                            features #> 1                                                1 RNA.EFS | 1 RNA.MRD29 | 1 RNA.OS #> 4                                                1 RNA.EFS | 1 RNA.MRD29 | 1 RNA.OS #> 5                                                1 RNA.EFS | 1 RNA.MRD29 | 1 RNA.OS #> 8                                                1 RNA.EFS | 1 RNA.MRD29 | 1 RNA.OS #> 9  1 Lesion.EFS | 1 Lesion.MRD29 | 1 Lesion.OS | 1 RNA.EFS | 1 RNA.MRD29 | 1 RNA.OS #> 10 1 Lesion.EFS | 1 Lesion.MRD29 | 1 Lesion.OS | 1 RNA.EFS | 1 RNA.MRD29 | 1 RNA.OS #> 23 1 Lesion.EFS | 1 Lesion.MRD29 | 1 Lesion.OS | 1 RNA.EFS | 1 RNA.MRD29 | 1 RNA.OS #> 30                                      1 Lesion.EFS | 1 Lesion.MRD29 | 1 Lesion.OS #> 31                                      1 Lesion.EFS | 1 Lesion.MRD29 | 1 Lesion.OS #> 33                                      1 Lesion.EFS | 1 Lesion.MRD29 | 1 Lesion.OS #>    mean.from.center origin.to.center distance.ratio      p.set     q.set #> 1               2.7        23.261819       8.615488 0.02970528 0.1112937 #> 4               2.7         7.262608       2.689855 0.10000000 0.1440999 #> 5               2.7        39.518499      14.636481 0.01704578 0.1064394 #> 8               2.7         6.541296       2.422702 0.10000000 0.1440999 #> 9               5.4        14.540832       2.692747 0.07445442 0.1440999 #> 10              5.4        71.196922      13.184615 0.01298854 0.1064394 #> 23              5.4        64.186229      11.886339 0.02357628 0.1104135 #> 30              2.7        60.083333      22.253086 0.01273073 0.1064394 #> 31              2.7         5.599363       2.073838 0.10000000 0.1440999 #> 33              2.7         5.851065       2.167061 0.09599200 0.1440999 #>  #> $beam.set.pvals$row.pvals #> NULL #>  #> $beam.set.pvals$set.mtch #>                         mtx.row          set.id      stat.id #> 62          RNA_ENSG00000081760 ENSG00000081760      RNA.EFS #> 61          RNA_ENSG00000081760 ENSG00000081760    RNA.MRD29 #> 63          RNA_ENSG00000081760 ENSG00000081760       RNA.OS #> 71          RNA_ENSG00000109576 ENSG00000109576      RNA.EFS #> 70          RNA_ENSG00000109576 ENSG00000109576    RNA.MRD29 #> 72          RNA_ENSG00000109576 ENSG00000109576       RNA.OS #> 74          RNA_ENSG00000114771 ENSG00000114771      RNA.EFS #> 75          RNA_ENSG00000114771 ENSG00000114771    RNA.MRD29 #> 73          RNA_ENSG00000114771 ENSG00000114771       RNA.OS #> 82          RNA_ENSG00000128274 ENSG00000128274      RNA.EFS #> 84          RNA_ENSG00000128274 ENSG00000128274    RNA.MRD29 #> 83          RNA_ENSG00000128274 ENSG00000128274       RNA.OS #> 4   Lesion_ENSG00000147883_loss ENSG00000147883   Lesion.EFS #> 5   Lesion_ENSG00000147883_loss ENSG00000147883 Lesion.MRD29 #> 6   Lesion_ENSG00000147883_loss ENSG00000147883    Lesion.OS #> 86          RNA_ENSG00000147883 ENSG00000147883      RNA.EFS #> 87          RNA_ENSG00000147883 ENSG00000147883    RNA.MRD29 #> 85          RNA_ENSG00000147883 ENSG00000147883       RNA.OS #> 8   Lesion_ENSG00000147889_loss ENSG00000147889   Lesion.EFS #> 9   Lesion_ENSG00000147889_loss ENSG00000147889 Lesion.MRD29 #> 7   Lesion_ENSG00000147889_loss ENSG00000147889    Lesion.OS #> 90          RNA_ENSG00000147889 ENSG00000147889      RNA.EFS #> 88          RNA_ENSG00000147889 ENSG00000147889    RNA.MRD29 #> 89          RNA_ENSG00000147889 ENSG00000147889       RNA.OS #> 26  Lesion_ENSG00000224854_loss ENSG00000224854   Lesion.EFS #> 27  Lesion_ENSG00000224854_loss ENSG00000224854 Lesion.MRD29 #> 25  Lesion_ENSG00000224854_loss ENSG00000224854    Lesion.OS #> 119         RNA_ENSG00000224854 ENSG00000224854      RNA.EFS #> 118         RNA_ENSG00000224854 ENSG00000224854    RNA.MRD29 #> 120         RNA_ENSG00000224854 ENSG00000224854       RNA.OS #> 47  Lesion_ENSG00000264545_loss ENSG00000264545   Lesion.EFS #> 48  Lesion_ENSG00000264545_loss ENSG00000264545 Lesion.MRD29 #> 46  Lesion_ENSG00000264545_loss ENSG00000264545    Lesion.OS #> 50  Lesion_ENSG00000264801_loss ENSG00000264801   Lesion.EFS #> 51  Lesion_ENSG00000264801_loss ENSG00000264801 Lesion.MRD29 #> 49  Lesion_ENSG00000264801_loss ENSG00000264801    Lesion.OS #> 57  Lesion_ENSG00000266446_loss ENSG00000266446   Lesion.EFS #> 56  Lesion_ENSG00000266446_loss ENSG00000266446 Lesion.MRD29 #> 55  Lesion_ENSG00000266446_loss ENSG00000266446    Lesion.OS #>                   row.id #> 62       ENSG00000081760 #> 61       ENSG00000081760 #> 63       ENSG00000081760 #> 71       ENSG00000109576 #> 70       ENSG00000109576 #> 72       ENSG00000109576 #> 74       ENSG00000114771 #> 75       ENSG00000114771 #> 73       ENSG00000114771 #> 82       ENSG00000128274 #> 84       ENSG00000128274 #> 83       ENSG00000128274 #> 4   ENSG00000147883_loss #> 5   ENSG00000147883_loss #> 6   ENSG00000147883_loss #> 86       ENSG00000147883 #> 87       ENSG00000147883 #> 85       ENSG00000147883 #> 8   ENSG00000147889_loss #> 9   ENSG00000147889_loss #> 7   ENSG00000147889_loss #> 90       ENSG00000147889 #> 88       ENSG00000147889 #> 89       ENSG00000147889 #> 26  ENSG00000224854_loss #> 27  ENSG00000224854_loss #> 25  ENSG00000224854_loss #> 119      ENSG00000224854 #> 118      ENSG00000224854 #> 120      ENSG00000224854 #> 47  ENSG00000264545_loss #> 48  ENSG00000264545_loss #> 46  ENSG00000264545_loss #> 50  ENSG00000264801_loss #> 51  ENSG00000264801_loss #> 49  ENSG00000264801_loss #> 57  ENSG00000266446_loss #> 56  ENSG00000266446_loss #> 55  ENSG00000266446_loss #>  #>  #> $beam.feat.pvals #> $beam.feat.pvals$Lesion.MRD29 #>                     id            gene        beta         p         q #> 1 ENSG00000147883_loss ENSG00000147883 -0.06887792 0.6666667 0.4074074 #> 2 ENSG00000147889_loss ENSG00000147889 -0.18938381 0.1666667 0.1527778 #> 3 ENSG00000224854_loss ENSG00000224854 -0.17833096 0.1666667 0.1527778 #> 4 ENSG00000264545_loss ENSG00000264545 -0.18609926 0.1666667 0.1527778 #> 5 ENSG00000264801_loss ENSG00000264801 -0.12821056 0.1666667 0.1527778 #> 6 ENSG00000266446_loss ENSG00000266446 -0.07479441 0.5000000 0.3666667 #>  #> $beam.feat.pvals$RNA.MRD29 #>                id            gene        beta         p         q #> 1 ENSG00000081760 ENSG00000081760 -0.03973064 0.6666667 0.6666667 #> 2 ENSG00000109576 ENSG00000109576 -0.11641160 0.1666667 0.3333333 #> 3 ENSG00000114771 ENSG00000114771  0.08370487 0.1666667 0.3333333 #> 4 ENSG00000128274 ENSG00000128274  0.09529498 0.1666667 0.3333333 #> 5 ENSG00000147883 ENSG00000147883 -0.05407062 0.5000000 0.6000000 #> 6 ENSG00000147889 ENSG00000147889 -0.01545819 0.5000000 0.6000000 #> 7 ENSG00000224854 ENSG00000224854  0.02761206 0.8333333 0.7142857 #>  #> $beam.feat.pvals$Lesion.OS #>                     id            gene      beta         p         q #> 1 ENSG00000147883_loss ENSG00000147883 0.2881053 0.5000000 0.2777778 #> 2 ENSG00000147889_loss ENSG00000147889 0.9426508 0.1666667 0.1388889 #> 3 ENSG00000224854_loss ENSG00000224854 0.9488390 0.1666667 0.1388889 #> 4 ENSG00000264545_loss ENSG00000264545 0.8836309 0.1666667 0.1388889 #> 5 ENSG00000264801_loss ENSG00000264801 0.3449753 0.5000000 0.2777778 #> 6 ENSG00000266446_loss ENSG00000266446 0.5411791 0.1666667 0.1388889 #>  #> $beam.feat.pvals$RNA.OS #>                id            gene       beta         p         q #> 1 ENSG00000081760 ENSG00000081760 0.13510178 0.5000000 0.3888889 #> 2 ENSG00000109576 ENSG00000109576 0.11760327 0.6666667 0.4444444 #> 3 ENSG00000114771 ENSG00000114771 0.14751566 0.1666667 0.1944444 #> 4 ENSG00000128274 ENSG00000128274 0.23584130 0.1666667 0.1944444 #> 5 ENSG00000147883 ENSG00000147883 0.20069900 0.1666667 0.1944444 #> 6 ENSG00000147889 ENSG00000147889 0.20974254 0.1666667 0.1944444 #> 7 ENSG00000224854 ENSG00000224854 0.08683849 0.5000000 0.3888889 #>  #> $beam.feat.pvals$Lesion.EFS #>                     id            gene        beta         p         q #> 1 ENSG00000147883_loss ENSG00000147883  0.03354078 0.8333333 1.0000000 #> 2 ENSG00000147889_loss ENSG00000147889  0.34089214 0.3333333 0.6666667 #> 3 ENSG00000224854_loss ENSG00000224854  0.34309511 0.1666667 0.6666667 #> 4 ENSG00000264545_loss ENSG00000264545  0.29337356 0.3333333 0.6666667 #> 5 ENSG00000264801_loss ENSG00000264801 -0.03602487 1.0000000 1.0000000 #> 6 ENSG00000266446_loss ENSG00000266446  0.12867032 0.8333333 1.0000000 #>  #> $beam.feat.pvals$RNA.EFS #>                id            gene        beta         p         q #> 1 ENSG00000081760 ENSG00000081760  0.39512059 0.1666667 0.1944444 #> 2 ENSG00000109576 ENSG00000109576  0.08833319 0.5000000 0.3888889 #> 3 ENSG00000114771 ENSG00000114771  0.14483645 0.1666667 0.1944444 #> 4 ENSG00000128274 ENSG00000128274  0.22670353 0.1666667 0.1944444 #> 5 ENSG00000147883 ENSG00000147883  0.12287691 0.3333333 0.3111111 #> 6 ENSG00000147889 ENSG00000147889  0.27823411 0.1666667 0.1944444 #> 7 ENSG00000224854 ENSG00000224854 -0.02584083 0.8333333 0.5555556"},{"path":"https://annaseffernick.github.io/BEAMR/articles/BEAMR.html","id":"plot-the-results","dir":"Articles","previous_headings":"","what":"Plot the Results","title":"BEAMR","text":"Finally, functions visualize results. First need update “beam.specs” include “plot” column. can done using prep_beam_plot() function. can plot top features (smallest feature-level p-value) specified set using plot_beam_clin() function.  can also plot clinical endpoint association plots specified feature using plot_feat_clin() function.","code":"plot.specs <- prep_beam_plot(beam.data=beam.data, beam.specs=beam.specs) plot.specs #>           name    mtx                                         mdl #> 1 Lesion.MRD29 Lesion    lm(MRD29~mtx.row,data=main.data,model=T) #> 2    RNA.MRD29    RNA    lm(MRD29~mtx.row,data=main.data,model=T) #> 3    Lesion.OS Lesion  coxphf2(OS~mtx.row,data=main.data,model=T) #> 4       RNA.OS    RNA  coxphf2(OS~mtx.row,data=main.data,model=T) #> 5   Lesion.EFS Lesion coxphf2(EFS~mtx.row,data=main.data,model=T) #> 6      RNA.EFS    RNA coxphf2(EFS~mtx.row,data=main.data,model=T) #>                                                                                                                                                                                                                         plot #> 1                                                                                        ggplot2::ggplot(data=main.data)+ggplot2::geom_boxplot(aes(x=mtx.row.fac, y=MRD29)) + ggplot2::ylab('MRD29')+ggplot2::xlab('Lesion') #> 2                                                                                                 ggplot2::ggplot(data=main.data)+ggplot2::geom_point(aes(x=mtx.row, y=MRD29)) + ggplot2::ylab('MRD29')+ggplot2::xlab('RNA') #> 3   survminer::ggsurvplot(survfit(OS~mtx.row.fac, data=main.data), data=main.data, legend='right', legend.title='Lesion', legend.labs=c(paste0(levels(main.data$mtx.row.fac))), ylab='OS Probability', font.x=12, font.y=12) #> 4    survminer::ggsurvplot(survfit(OS~(mtx.row>median(mtx.row, na.rm=TRUE)), data=main.data), data=main.data, legend='right', legend.title='RNA', legend.labs=c('High', 'Low'), ylab='OS Probability', font.x=12, font.y=12) #> 5 survminer::ggsurvplot(survfit(EFS~mtx.row.fac, data=main.data), data=main.data, legend='right', legend.title='Lesion', legend.labs=c(paste0(levels(main.data$mtx.row.fac))), ylab='EFS Probability', font.x=12, font.y=12) #> 6  survminer::ggsurvplot(survfit(EFS~(mtx.row>median(mtx.row, na.rm=TRUE)), data=main.data), data=main.data, legend='right', legend.title='RNA', legend.labs=c('High', 'Low'), ylab='EFS Probability', font.x=12, font.y=12) plot_beam_clin(beam.result=beam.stats, beam.specs=plot.specs,                beam.set.pvals = set.pvals, beam.feat.pvals=feat.pvals,                set.id=\"ENSG00000099810\", pair.type=NULL, number.pairs=1,                n.col=3, n.row=NULL) #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_point()`). plot_feat_clin(beam.result=beam.stats, beam.specs=plot.specs,                beam.set.pvals=set.pvals, beam.feat.pvals=feat.pvals,                feat.id=\"ENSG00000227443_loss\", n.col=2, n.row=NULL)"},{"path":"https://annaseffernick.github.io/BEAMR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anna Eames Seffernick. Author, maintainer, copyright holder. Stanley Pounds. Author. Xueyuan Cao. Author.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Seffernick , Pounds S, Cao X (2024). BEAMR: Bootstrap Evaluation Association Matrices. R package version 1.1.0, https://github.com/annaSeffernick/BEAMR, https://annaseffernick.github.io/BEAMR/.","code":"@Manual{,   title = {BEAMR: Bootstrap Evaluation of Association Matrices},   author = {Anna Eames Seffernick and Stanley Pounds and Xueyuan Cao},   year = {2024},   note = {R package version 1.1.0, https://github.com/annaSeffernick/BEAMR},   url = {https://annaseffernick.github.io/BEAMR/}, }"},{"path":"https://annaseffernick.github.io/BEAMR/index.html","id":"beamr","dir":"","previous_headings":"","what":"Bootstrap Evaluation of Association Matrices","title":"Bootstrap Evaluation of Association Matrices","text":"BEAMR package implements Bootstrap Evaluation Association Matrices (BEAM) method identify genes multiple genomic features associated multiple clinical endpoints. uses simple association models bootstraping integrate multiple genomic features.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bootstrap Evaluation of Association Matrices","text":"can install BEAMR CRAN : can install development version BEAMR GitHub :","code":"install.packages(\"BEAMR\") # install.packages(\"devtools\") devtools::install_github(\"annaSeffernick/BEAMR\")"},{"path":"https://annaseffernick.github.io/BEAMR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Bootstrap Evaluation of Association Matrices","text":"See vignette BEAMR Vignette.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_dat","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_dat","text":"beam.data object used example beam analyses","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_dat","text":"","code":"beam_dat"},{"path":[]},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_dat.html","id":"beam-dat","dir":"Reference","previous_headings":"","what":"beam_dat","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_dat","text":"beam.data object, list following elements: main.data data.frame clinical/endpoint data. mtx.data list omics data matrices. mtx.anns list omic annotation data.frames. anns.mtch data.frame information link mtx.data mtx.anns. set.data data.frame set.id, mtx.id, row.id link omic features sets. set.anns Optional data.frame set annotation data. boot.index matrix bootstrap indices.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_dat.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_dat","text":"NA","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_dat_sm.html","id":null,"dir":"Reference","previous_headings":"","what":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_dat_sm","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_dat_sm","text":"smaller beam.data object used example compute_beam_stats function","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_dat_sm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_dat_sm","text":"","code":"beam_dat_sm"},{"path":[]},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_dat_sm.html","id":"beam-dat-sm","dir":"Reference","previous_headings":"","what":"beam_dat_sm","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_dat_sm","text":"beam.data object, list following elements: main.data data.frame clinical/endpoint data. mtx.data list omics data matrices. mtx.anns list omic annotation data.frames. anns.mtch data.frame information link mtx.data mtx.anns. set.data data.frame set.id, mtx.id, row.id link omic features sets. set.anns Optional data.frame set annotation data. boot.index matrix bootstrap indices.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_dat_sm.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_dat_sm","text":"NA","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_specs.html","id":null,"dir":"Reference","previous_headings":"","what":"Pediatric T-ALL BEAM Analysis Specs Data from COG trial AALL0434 — beam_specs","title":"Pediatric T-ALL BEAM Analysis Specs Data from COG trial AALL0434 — beam_specs","text":"beam.specs object used example beam analyses","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_specs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pediatric T-ALL BEAM Analysis Specs Data from COG trial AALL0434 — beam_specs","text":"","code":"beam_specs"},{"path":[]},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_specs.html","id":"beam-specs","dir":"Reference","previous_headings":"","what":"beam_specs","title":"Pediatric T-ALL BEAM Analysis Specs Data from COG trial AALL0434 — beam_specs","text":"data frame 6 rows 3 columns: name Analysis name omic endpoint mtx Name omics matrix used analysis mdl Regression model","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_specs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pediatric T-ALL BEAM Analysis Specs Data from COG trial AALL0434 — beam_specs","text":"NA","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_specs_sm.html","id":null,"dir":"Reference","previous_headings":"","what":"Pediatric T-ALL BEAM Analysis Specs Data from COG trial AALL0434 — beam_specs_sm","title":"Pediatric T-ALL BEAM Analysis Specs Data from COG trial AALL0434 — beam_specs_sm","text":"small beam.specs object used example compute_beam_stats function.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_specs_sm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pediatric T-ALL BEAM Analysis Specs Data from COG trial AALL0434 — beam_specs_sm","text":"","code":"beam_specs_sm"},{"path":[]},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_specs_sm.html","id":"beam-specs-sm","dir":"Reference","previous_headings":"","what":"beam_specs_sm","title":"Pediatric T-ALL BEAM Analysis Specs Data from COG trial AALL0434 — beam_specs_sm","text":"data frame 2 rows 3 columns: name Analysis name omic endpoint mtx Name omics matrix used analysis mdl Regression model","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_specs_sm.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pediatric T-ALL BEAM Analysis Specs Data from COG trial AALL0434 — beam_specs_sm","text":"NA","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_stats","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_stats","text":"beam.stats object used example beam analyses","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_stats","text":"","code":"beam_stats"},{"path":[]},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_stats.html","id":"beam-stats","dir":"Reference","previous_headings":"","what":"beam_stats","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_stats","text":"beam.stats object, contains following objects beam.stats list data.frames association statistics omic-endpoint pair. beam.specs beam.specs object (data.frame name, mtx, mdl.) beam.data beam.data object.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_stats.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_stats","text":"NA","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_stats_sm.html","id":null,"dir":"Reference","previous_headings":"","what":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_stats_sm","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_stats_sm","text":"small beam.stats object used example compute_beam_stats function.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_stats_sm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_stats_sm","text":"","code":"beam_stats_sm"},{"path":[]},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_stats_sm.html","id":"beam-stats-sm","dir":"Reference","previous_headings":"","what":"beam_stats_sm","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_stats_sm","text":"beam.stats object, contains following objects beam.stats list data.frames association statistics omic-endpoint pair. beam.specs beam.specs object (data.frame name, mtx, mdl.) beam.data beam.data object.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/beam_stats_sm.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — beam_stats_sm","text":"NA","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/check_beam_specs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that beam.specs satisfies all necessary conditions — check_beam_specs","title":"Check that beam.specs satisfies all necessary conditions — check_beam_specs","text":"Check beam.specs satisfies necessary conditions","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/check_beam_specs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that beam.specs satisfies all necessary conditions — check_beam_specs","text":"","code":"check_beam_specs(beam.specs, mtx.names)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/check_beam_specs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that beam.specs satisfies all necessary conditions — check_beam_specs","text":"beam.specs data.frame column name, mtx, mdl mtx.names vector names data matrices (beam.data$mtx.data)","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/check_beam_specs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that beam.specs satisfies all necessary conditions — check_beam_specs","text":"data.frame beam.specs conditions satisfied, otherwise throws error","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/check_beam_specs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that beam.specs satisfies all necessary conditions — check_beam_specs","text":"","code":"data(beam_dat) data(beam_specs) test_specs <- check_beam_specs(beam_specs, names(beam_dat$mtx.data))"},{"path":"https://annaseffernick.github.io/BEAMR/reference/check_list_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that each element of a list is of a required class — check_list_class","title":"Check that each element of a list is of a required class — check_list_class","text":"Check element list required class","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/check_list_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that each element of a list is of a required class — check_list_class","text":"","code":"check_list_class(list.object, required.class)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/check_list_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that each element of a list is of a required class — check_list_class","text":"list.object list used BEAMR analysis required.class Class list elements, e.g. matrix","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/check_list_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that each element of a list is of a required class — check_list_class","text":"Logical TRUE list required class","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/check_list_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that each element of a list is of a required class — check_list_class","text":"","code":"data(omicdat) check_list_class(omicdat, \"matrix\") #> [1] TRUE"},{"path":"https://annaseffernick.github.io/BEAMR/reference/clean_Bmtx.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean up bootstrap coefficient matrix — clean_Bmtx","title":"Clean up bootstrap coefficient matrix — clean_Bmtx","text":"Clean bootstrap coefficient matrix","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/clean_Bmtx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean up bootstrap coefficient matrix — clean_Bmtx","text":"","code":"clean_Bmtx(B)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/clean_Bmtx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean up bootstrap coefficient matrix — clean_Bmtx","text":"B Matrix bootstrap coefficients","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/clean_Bmtx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean up bootstrap coefficient matrix — clean_Bmtx","text":"Matrix cleaned bootstrap coefficients","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/clean_Bmtx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean up bootstrap coefficient matrix — clean_Bmtx","text":"","code":"data(beam_stats) B.mtx <- beam_stats$beam.stats[[1]] B.cln <- clean_Bmtx(B.mtx)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/clinf.html","id":null,"dir":"Reference","previous_headings":"","what":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — clinf","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — clinf","text":"subset clinical data pediatric young adult t-lineage acute lymphoblastic leukmia patients Children's Oncology Group trial AALL0434, published Liu et al., 2017 Nature Genetics","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/clinf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — clinf","text":"","code":"clinf"},{"path":[]},{"path":"https://annaseffernick.github.io/BEAMR/reference/clinf.html","id":"clinf","dir":"Reference","previous_headings":"","what":"clinf","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — clinf","text":"data frame 265 rows 8 columns: ID Subject ID MRD29 Minimal residual disease measured day 29 RNA.clm Key match RNA matrix Lesion.clm Key match Lesion matrix Lesion.id Key match Lesion matrix RNA.id Key match RNA matrix EFS Event-free survival Surv object OS Overall survival Surv object","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/clinf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pediatric T-ALL Clinical Data from COG trial AALL0434 — clinf","text":"https://www.nature.com/articles/ng.3909","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/compute_beam_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute bootstrap model coefficients for BEAM — compute_beam_stats","title":"Compute bootstrap model coefficients for BEAM — compute_beam_stats","text":"Compute bootstrap model coefficients BEAM","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/compute_beam_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute bootstrap model coefficients for BEAM — compute_beam_stats","text":"","code":"compute_beam_stats(beam.data, beam.specs, stdize = TRUE)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/compute_beam_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute bootstrap model coefficients for BEAM — compute_beam_stats","text":"beam.data Result prep.beam.data beam.specs data.frame strings columns name, mtx, mdl (string R model mtx.row) stdize Logical whether standardize (center scale) predictors . Default TRUE.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/compute_beam_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute bootstrap model coefficients for BEAM — compute_beam_stats","text":"beam.stats object, list beam.stats (association matrices), beam.specs, beam.data","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/compute_beam_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute bootstrap model coefficients for BEAM — compute_beam_stats","text":"","code":"data(beam_dat_sm) data(beam_specs_sm) test.beam.stats <- compute_beam_stats(beam.data=beam_dat_sm,                                       beam.specs=beam_specs_sm, stdize=TRUE) #> Working on analysis 1 of 2 : Mon Jul 22 13:53:06 2024 #> Lesionlm(MRD29~mtx.row,data=main.data,model=T) #>   Working on bootstrap 0 of 3 : Mon Jul 22 13:53:06 2024 #> Working on analysis 2 of 2 : Mon Jul 22 13:53:06 2024 #> RNAlm(MRD29~mtx.row,data=main.data,model=T) #>   Working on bootstrap 0 of 3 : Mon Jul 22 13:53:06 2024"},{"path":"https://annaseffernick.github.io/BEAMR/reference/compute_feature_pvalues.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute feature level p-values from BEAM statistics — compute_feature_pvalues","title":"Compute feature level p-values from BEAM statistics — compute_feature_pvalues","text":"Compute feature level p-values BEAM statistics","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/compute_feature_pvalues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute feature level p-values from BEAM statistics — compute_feature_pvalues","text":"","code":"compute_feature_pvalues(beam.stats)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/compute_feature_pvalues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute feature level p-values from BEAM statistics — compute_feature_pvalues","text":"beam.stats beam.stats object, list beam.stats (association matrices), beam.specs, beam.data","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/compute_feature_pvalues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute feature level p-values from BEAM statistics — compute_feature_pvalues","text":"list feature level p-values, entry data frame different omics/endpoint associaiton, columns id, gene, beta, p, q","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/compute_feature_pvalues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute feature level p-values from BEAM statistics — compute_feature_pvalues","text":"","code":"data(beam_stats) test.feat.pvals <- compute_feature_pvalues(beam.stats=beam_stats) #> Computing feature p-values for stat matrix 1 of 6: Mon Jul 22 13:53:06 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 2 of 6: Mon Jul 22 13:53:06 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 3 of 6: Mon Jul 22 13:53:06 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 4 of 6: Mon Jul 22 13:53:06 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 5 of 6: Mon Jul 22 13:53:06 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 6 of 6: Mon Jul 22 13:53:06 2024 #>   This matrix has 20 features."},{"path":"https://annaseffernick.github.io/BEAMR/reference/compute_set_pvalues.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute BEAMR p-values for sets — compute_set_pvalues","title":"Compute BEAMR p-values for sets — compute_set_pvalues","text":"Compute BEAMR p-values sets","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/compute_set_pvalues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute BEAMR p-values for sets — compute_set_pvalues","text":"","code":"compute_set_pvalues(   beam.stats,   peel = FALSE,   z = TRUE,   alpha = 0.1,   mess.freq = 25 )"},{"path":"https://annaseffernick.github.io/BEAMR/reference/compute_set_pvalues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute BEAMR p-values for sets — compute_set_pvalues","text":"beam.stats beam.stats object compute_beam_stats function peel Logical indicating whether peel p-value calculation z Logical indicating whether z-scale vector one coefficient estimate across bootstraps analysis alpha Maximum depth peel (reduces computing time); default 0.1. mess.freq Message frequency; default 25.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/compute_set_pvalues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute BEAMR p-values for sets — compute_set_pvalues","text":"list data.frame set p-values BEAMR analysis, data.frame summary row p-values, data frame set matching.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/compute_set_pvalues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute BEAMR p-values for sets — compute_set_pvalues","text":"","code":"data(beam_stats_sm) test.pvals <- compute_set_pvalues(beam.stats=beam_stats_sm) #> Preparing bootstrap results for calculating feature set p-values: Mon Jul 22 13:53:06 2024 #> Finding stats for each data matrix:Mon Jul 22 13:53:06 2024 #>   Finding stats for data matrix Lesion: Mon Jul 22 13:53:06 2024 #>    Finding features with with Lesion.MRD29 stats: Mon Jul 22 13:53:06 2024 #>   Finding stats for data matrix RNA: Mon Jul 22 13:53:06 2024 #>    Finding features with with RNA.MRD29 stats: Mon Jul 22 13:53:06 2024 #> Found 40 rows of stats: Mon Jul 22 13:53:06 2024 #> Merging stats with feature-sets: Mon Jul 22 13:53:06 2024 #> Merged feature-set stat rows: 40 #> Ordering and indexing feature sets: Mon Jul 22 13:53:06 2024 #>   Cleaning up beam.stat matrices:Mon Jul 22 13:53:06 2024 #>    Working on matrix 1 of 2: Mon Jul 22 13:53:06 2024 #>    Working on matrix 2 of 2: Mon Jul 22 13:53:06 2024 #> Computing p-value for feature set 1 of 34: Mon Jul 22 13:53:06 2024 #> 11ENSG00000081760 #> Computing p-value for feature set 26 of 34: Mon Jul 22 13:53:06 2024 #> 3232ENSG00000229835 #> Finished computing p-values at: Mon Jul 22 13:53:06 2024 #> Minimum q-value is 0.0608278029898599 #> Creating set p-value data frame. #> Done creating data frame. #> Creating list for output."},{"path":"https://annaseffernick.github.io/BEAMR/reference/extend_set_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend set definition data with genes on the same row separated by commas, semicolons, slashes, etc — extend_set_data","title":"Extend set definition data with genes on the same row separated by commas, semicolons, slashes, etc — extend_set_data","text":"Extend set definition data genes row separated commas, semicolons, slashes, etc","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/extend_set_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend set definition data with genes on the same row separated by commas, semicolons, slashes, etc — extend_set_data","text":"","code":"extend_set_data(set.data, sep)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/extend_set_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend set definition data with genes on the same row separated by commas, semicolons, slashes, etc — extend_set_data","text":"set.data data frame set definition data. sep Punctuation split .","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/extend_set_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend set definition data with genes on the same row separated by commas, semicolons, slashes, etc — extend_set_data","text":"data frame.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/extend_set_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extend set definition data with genes on the same row separated by commas, semicolons, slashes, etc — extend_set_data","text":"","code":"data(setdat) extend_set_data(setdat, sep=\",\") #>             set.id mtx.id                   row.id #> 1  ENSG00000121410    RNA          ENSG00000121410 #> 2  ENSG00000148584    RNA          ENSG00000148584 #> 3  ENSG00000175899    RNA          ENSG00000175899 #> 4  ENSG00000166535    RNA          ENSG00000166535 #> 5  ENSG00000184389    RNA          ENSG00000184389 #> 6  ENSG00000128274    RNA          ENSG00000128274 #> 7  ENSG00000118017    RNA          ENSG00000118017 #> 8  ENSG00000094914    RNA          ENSG00000094914 #> 9  ENSG00000081760    RNA          ENSG00000081760 #> 10 ENSG00000114771    RNA          ENSG00000114771 #> 11 ENSG00000197953    RNA          ENSG00000197953 #> 12 ENSG00000188984    RNA          ENSG00000188984 #> 13 ENSG00000204518    RNA          ENSG00000204518 #> 14 ENSG00000109576    RNA          ENSG00000109576 #> 15 ENSG00000224854    RNA          ENSG00000224854 #> 16 ENSG00000147889    RNA          ENSG00000147889 #> 17 ENSG00000147883    RNA          ENSG00000147883 #> 18 ENSG00000176399    RNA          ENSG00000176399 #> 19 ENSG00000099810    RNA          ENSG00000099810 #> 20 ENSG00000148400    RNA          ENSG00000148400 #> 21 ENSG00000264545 Lesion     ENSG00000264545_loss #> 22 ENSG00000147889 Lesion     ENSG00000147889_loss #> 23 ENSG00000224854 Lesion     ENSG00000224854_loss #> 24 ENSG00000148400 Lesion ENSG00000148400_mutation #> 25 ENSG00000099810 Lesion     ENSG00000099810_loss #> 26 ENSG00000264801 Lesion     ENSG00000264801_loss #> 27 ENSG00000240498 Lesion     ENSG00000240498_loss #> 28 ENSG00000265194 Lesion     ENSG00000265194_loss #> 29 ENSG00000266446 Lesion     ENSG00000266446_loss #> 30 ENSG00000147883 Lesion     ENSG00000147883_loss #> 31 ENSG00000215221 Lesion     ENSG00000215221_loss #> 32 ENSG00000266732 Lesion     ENSG00000266732_loss #> 33 ENSG00000236921 Lesion     ENSG00000236921_loss #> 34 ENSG00000229298 Lesion     ENSG00000229298_loss #> 35 ENSG00000244230 Lesion     ENSG00000244230_loss #> 36 ENSG00000229835 Lesion     ENSG00000229835_loss #> 37 ENSG00000176399 Lesion     ENSG00000176399_loss #> 38 ENSG00000227443 Lesion     ENSG00000227443_loss #> 39 ENSG00000171889 Lesion     ENSG00000171889_loss #> 40 ENSG00000199177 Lesion     ENSG00000199177_loss"},{"path":"https://annaseffernick.github.io/BEAMR/reference/extract_beam_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract beam stats for a specific set — extract_beam_stats","title":"Extract beam stats for a specific set — extract_beam_stats","text":"Extract beam stats specific set","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/extract_beam_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract beam stats for a specific set — extract_beam_stats","text":"","code":"extract_beam_stats(beam.stats, set.id)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/extract_beam_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract beam stats for a specific set — extract_beam_stats","text":"beam.stats beam.stats object, list beam.stats (association matrices), beam.specs, beam.data set.id character set id name (entry beam.data$set.data$set.id)","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/extract_beam_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract beam stats for a specific set — extract_beam_stats","text":"matrix estimated associations endpoint omic feature linked set","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/extract_beam_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract beam stats for a specific set — extract_beam_stats","text":"","code":"data(beam_stats) test.stats <- extract_beam_stats(beam_stats, set.id=\"ENSG00000099810\")"},{"path":"https://annaseffernick.github.io/BEAMR/reference/find_id_clm.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the column of mtch.data with the most rows containing an element of ids — find_id_clm","title":"Find the column of mtch.data with the most rows containing an element of ids — find_id_clm","text":"Find column mtch.data rows containing element ids","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/find_id_clm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the column of mtch.data with the most rows containing an element of ids — find_id_clm","text":"","code":"find_id_clm(mtch.data, ids)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/find_id_clm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the column of mtch.data with the most rows containing an element of ids — find_id_clm","text":"mtch.data data.frame ids vector row ids match","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/find_id_clm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the column of mtch.data with the most rows containing an element of ids — find_id_clm","text":"vector column names matches.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/find_id_clm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the column of mtch.data with the most rows containing an element of ids — find_id_clm","text":"","code":"data(omicann) data(omicdat) lsn.data <- omicann[[1]] mtx.rows <- rownames(omicdat[[1]]) test <- find_id_clm(lsn.data,mtx.rows)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/gen_beam_plot_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate BEAM Plot List — gen_beam_plot_list","title":"Generate BEAM Plot List — gen_beam_plot_list","text":"Internal function: generate list clinical feature plots.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/gen_beam_plot_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate BEAM Plot List — gen_beam_plot_list","text":"","code":"gen_beam_plot_list(   beam.result,   beam.specs,   beam.feat.pvals,   number.pairs = 1,   set.id,   feat.id = NULL,   title.size = 10,   pair.order = \"both\",   endpt.order = NULL )"},{"path":"https://annaseffernick.github.io/BEAMR/reference/gen_beam_plot_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate BEAM Plot List — gen_beam_plot_list","text":"beam.result Result prep.beam.data beam.specs data.frame strings columns name, mtx, mdl, plot beam.feat.pvals List feature-level p-values compute_feature_pvalues number.pairs Numeric; number features display clinical plots, ordered significance set.id character set name; must beam.result$beam.data$set.data$set.id feat.id Default NULL; character feature name; must beam.result$beam.data$set.data$row.id title.size numeric. Specify size individual plot titles. Default 10. pair.order One c(\"\", \"omic\", \"endpoint\"). Default \".\" Specify choose feature-endpoint plots include. \"\", find best (based q, p, effect size) feature-omic pair type omic endpoint separately. \"omic\", within omic, find best feature-endpoint pair plot feature endpoints. \"endpoint\", need specify endpt.order name chosen endpoint. , within omic, find feature best association selected endpoint, plot feature endpoints. endpt.order Default NULL. pair.order=\"endpoint\", specify character endpoint name (beam.specs$name, period).","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/gen_beam_plot_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate BEAM Plot List — gen_beam_plot_list","text":"list plots specified set /feature.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/gen_beam_plot_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate BEAM Plot List — gen_beam_plot_list","text":"","code":"data(beam_stats) test.feat.pvals <- compute_feature_pvalues(beam.stats=beam_stats) #> Computing feature p-values for stat matrix 1 of 6: Mon Jul 22 13:53:07 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 2 of 6: Mon Jul 22 13:53:07 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 3 of 6: Mon Jul 22 13:53:07 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 4 of 6: Mon Jul 22 13:53:07 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 5 of 6: Mon Jul 22 13:53:07 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 6 of 6: Mon Jul 22 13:53:07 2024 #>   This matrix has 20 features. plot.specs <- prep_beam_plot(beam.data=beam_stats$beam.data,                              beam.specs=beam_stats$beam.specs) plot.list <- gen_beam_plot_list(beam.result=beam_stats, beam.specs=plot.specs,                                 beam.feat.pvals=test.feat.pvals,                                 number.pairs=1, set.id=\"ENSG00000099810\",                                 feat.id=NULL, title.size=11,                                 pair.order=\"omic\", endpt.order=NULL)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/get_id_index.html","id":null,"dir":"Reference","previous_headings":"","what":"For each row of the data.frame main.data, find the index of the matching element in vector ids — get_id_index","title":"For each row of the data.frame main.data, find the index of the matching element in vector ids — get_id_index","text":"row data.frame main.data, find index matching element vector ids","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/get_id_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For each row of the data.frame main.data, find the index of the matching element in vector ids — get_id_index","text":"","code":"get_id_index(mtch.data, ids, warn = TRUE)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/get_id_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For each row of the data.frame main.data, find the index of the matching element in vector ids — get_id_index","text":"mtch.data data.frame linked ids ids vector ids linked mtch.data warn logical value whether include warnings results","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/get_id_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For each row of the data.frame main.data, find the index of the matching element in vector ids — get_id_index","text":"data.frame matching id index","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/get_id_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"For each row of the data.frame main.data, find the index of the matching element in vector ids — get_id_index","text":"","code":"data(clinf) data(omicdat) mtx.clms <- colnames(omicdat[[1]]) id_index <- get_id_index(clinf,mtx.clms)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/omicann.html","id":null,"dir":"Reference","previous_headings":"","what":"Pediatric T-ALL Omics Annotation Data from COG trial AALL0434 — omicann","title":"Pediatric T-ALL Omics Annotation Data from COG trial AALL0434 — omicann","text":"subset genomic lesion RNA expression data pediatric young adult t-lineage acute lymphoblastic leukmia patients Children's Oncology Group trial AALL0434, published Liu et al., 2017 Nature Genetics. annotation mapping feature id gene name given Ensembl ID.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/omicann.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pediatric T-ALL Omics Annotation Data from COG trial AALL0434 — omicann","text":"","code":"omicann"},{"path":[]},{"path":"https://annaseffernick.github.io/BEAMR/reference/omicann.html","id":"omicann","dir":"Reference","previous_headings":"","what":"omicann","title":"Pediatric T-ALL Omics Annotation Data from COG trial AALL0434 — omicann","text":"list two data frames omics annotation. Lesion dataframe 20 rows 2 columns lesion ID Ensembl ID. RNA dataframe 20 rows 2 columns featue ID Ensembl ID.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/omicann.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pediatric T-ALL Omics Annotation Data from COG trial AALL0434 — omicann","text":"https://www.nature.com/articles/ng.3909","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/omicdat.html","id":null,"dir":"Reference","previous_headings":"","what":"Pediatric T-ALL Omics Data from COG trial AALL0434 — omicdat","title":"Pediatric T-ALL Omics Data from COG trial AALL0434 — omicdat","text":"subset genomic lesion RNA expression data pediatric young adult t-lineage acute lymphoblastic leukmia patients Children's Oncology Group trial AALL0434, published Liu et al., 2017 Nature Genetics","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/omicdat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pediatric T-ALL Omics Data from COG trial AALL0434 — omicdat","text":"","code":"omicdat"},{"path":[]},{"path":"https://annaseffernick.github.io/BEAMR/reference/omicdat.html","id":"omicdat","dir":"Reference","previous_headings":"","what":"omicdat","title":"Pediatric T-ALL Omics Data from COG trial AALL0434 — omicdat","text":"list two dataframes omic data subject Lesion dataframe 20 rows 265 columns indicating presence lesion. RNA dataframe 20 rows 265 columns expression data.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/omicdat.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pediatric T-ALL Omics Data from COG trial AALL0434 — omicdat","text":"https://www.nature.com/articles/ng.3909","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/plot_beam_boot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot bootstrap output for BEAM sets — plot_beam_boot","title":"Plot bootstrap output for BEAM sets — plot_beam_boot","text":"#' plot_beam_boot produces pairs plot beam stats matrices. Default maximum 5 plots, ordered significant association direction.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/plot_beam_boot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot bootstrap output for BEAM sets — plot_beam_boot","text":"","code":"plot_beam_boot(   beam.result,   beam.feat.pvals,   beam.specs = NULL,   set.id,   max.plots = 4,   z = TRUE )"},{"path":"https://annaseffernick.github.io/BEAMR/reference/plot_beam_boot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot bootstrap output for BEAM sets — plot_beam_boot","text":"beam.result beam.stats object compute_beam_stats beam.feat.pvals list containing feature-level p-values compute_feature_pvalues. beam.specs data.frame. Default NULL, case beam.result$beam.specs used. Otherwise can input beam.specs data.frame must contain name, mtx, mdl, plot columns. set.id character specifying name set. Must beam.result$beam.data$set.data max.plots number specifying max number rows pairs plot. Default 4, ordered feature-level p-value. z Logical indicating whether z-scale vector one coefficient estimate across bootstraps plotting. Default TRUE.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/plot_beam_boot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot bootstrap output for BEAM sets — plot_beam_boot","text":"pairs plot figure.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/plot_beam_boot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot bootstrap output for BEAM sets — plot_beam_boot","text":"","code":"data(beam_stats) test.pvals <- compute_set_pvalues(beam.stats=beam_stats) #> Preparing bootstrap results for calculating feature set p-values: Mon Jul 22 13:53:08 2024 #> Finding stats for each data matrix:Mon Jul 22 13:53:08 2024 #>   Finding stats for data matrix Lesion: Mon Jul 22 13:53:08 2024 #>    Finding features with with Lesion.MRD29 stats: Mon Jul 22 13:53:08 2024 #>    Finding features with with Lesion.EFS stats: Mon Jul 22 13:53:08 2024 #>    Finding features with with Lesion.OS stats: Mon Jul 22 13:53:08 2024 #>   Finding stats for data matrix RNA: Mon Jul 22 13:53:08 2024 #>    Finding features with with RNA.MRD29 stats: Mon Jul 22 13:53:08 2024 #>    Finding features with with RNA.EFS stats: Mon Jul 22 13:53:08 2024 #>    Finding features with with RNA.OS stats: Mon Jul 22 13:53:08 2024 #> Found 120 rows of stats: Mon Jul 22 13:53:08 2024 #> Merging stats with feature-sets: Mon Jul 22 13:53:08 2024 #> Merged feature-set stat rows: 120 #> Ordering and indexing feature sets: Mon Jul 22 13:53:08 2024 #>   Cleaning up beam.stat matrices:Mon Jul 22 13:53:08 2024 #>    Working on matrix 1 of 6: Mon Jul 22 13:53:08 2024 #>    Working on matrix 2 of 6: Mon Jul 22 13:53:08 2024 #>    Working on matrix 3 of 6: Mon Jul 22 13:53:08 2024 #>    Working on matrix 4 of 6: Mon Jul 22 13:53:08 2024 #>    Working on matrix 5 of 6: Mon Jul 22 13:53:08 2024 #>    Working on matrix 6 of 6: Mon Jul 22 13:53:08 2024 #> Computing p-value for feature set 1 of 34: Mon Jul 22 13:53:08 2024 #> 13ENSG00000081760 #> Computing p-value for feature set 26 of 34: Mon Jul 22 13:53:08 2024 #> 9496ENSG00000229835 #> Finished computing p-values at: Mon Jul 22 13:53:08 2024 #> Minimum q-value is 0.106439437831269 #> Creating set p-value data frame. #> Done creating data frame. #> Creating list for output. test.feat.pvals <- compute_feature_pvalues(beam.stats=beam_stats) #> Computing feature p-values for stat matrix 1 of 6: Mon Jul 22 13:53:08 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 2 of 6: Mon Jul 22 13:53:08 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 3 of 6: Mon Jul 22 13:53:08 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 4 of 6: Mon Jul 22 13:53:08 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 5 of 6: Mon Jul 22 13:53:08 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 6 of 6: Mon Jul 22 13:53:08 2024 #>   This matrix has 20 features. test.boot.plot <- plot_beam_boot(beam_stats, test.feat.pvals,                                  set.id=\"ENSG00000099810\")"},{"path":"https://annaseffernick.github.io/BEAMR/reference/plot_beam_clin.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot BEAM Sets — plot_beam_clin","title":"Plot BEAM Sets — plot_beam_clin","text":"plot_beam_clin produces matrix feature level clinical plots set. Users can specify omic/endpoint pairs want see well number features set. Default omic/endpoint pairs top feature (smallest feature-level p-value).","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/plot_beam_clin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot BEAM Sets — plot_beam_clin","text":"","code":"plot_beam_clin(   beam.result,   beam.specs = NULL,   beam.set.pvals,   beam.feat.pvals,   set.id,   gene.name = NULL,   pair.type = NULL,   number.pairs = 1,   pair.order = \"both\",   endpt.order = NULL,   n.col = NULL,   n.row = NULL,   title.size = 10 )"},{"path":"https://annaseffernick.github.io/BEAMR/reference/plot_beam_clin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot BEAM Sets — plot_beam_clin","text":"beam.result beam.stats object compute_beam_stats beam.specs data.frame. Default NULL, case beam.result$beam.specs used. Otherwise can input beam.specs data.frame must contain name, mtx, mdl, plot columns. beam.set.pvals list containing BEAMR set p-values compute_set_pvalues. beam.feat.pvals list containing feature-level p-values compute_feature_pvalues. set.id character specifying name set. Must beam.result$beam.data$set.data gene.name character specifying Gene Name/Symbol set. Default NULL pair.type character vector. Default NULL, case clinical plots omic/endpoint pairs produced. Otherwise specify pairs beam.stats$beam.specs$name number.pairs numeric. Default 1, case feature best simple test pair plotted. >1, show top n simple plots ordered feature-level p-value pair.order One c(\"\", \"omic\", \"endpoint\"). Default \".\" Specify choose feature-endpoint plots include. \"\", find best (based q, p, effect size) feature-omic pair type omic endpoint separately. \"omic\", within omic, find best feature-endpoint pair plot feature endpoints. \"endpoint\", need specify endpt.order name chosen endpoint. , within omic, find feature best association selected endpoint, plot feature endpoints. endpt.order Default NULL. pair.order=\"endpoint\", specify character endpoint name (beam.specs$name, period). n.col numeric. Specify number columns plot layout; default NULL use number omics types. n.row numeric. Specify number rows plot layout; default NULL automatically define number rows number columns specified. title.size numeric. Specify size individual plot titles. Default 10.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/plot_beam_clin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot BEAM Sets — plot_beam_clin","text":"figure (ggarrange object)","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/plot_beam_clin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot BEAM Sets — plot_beam_clin","text":"","code":"data(beam_stats) test.pvals <- compute_set_pvalues(beam.stats=beam_stats) #> Preparing bootstrap results for calculating feature set p-values: Mon Jul 22 13:53:08 2024 #> Finding stats for each data matrix:Mon Jul 22 13:53:08 2024 #>   Finding stats for data matrix Lesion: Mon Jul 22 13:53:08 2024 #>    Finding features with with Lesion.MRD29 stats: Mon Jul 22 13:53:08 2024 #>    Finding features with with Lesion.EFS stats: Mon Jul 22 13:53:08 2024 #>    Finding features with with Lesion.OS stats: Mon Jul 22 13:53:08 2024 #>   Finding stats for data matrix RNA: Mon Jul 22 13:53:08 2024 #>    Finding features with with RNA.MRD29 stats: Mon Jul 22 13:53:08 2024 #>    Finding features with with RNA.EFS stats: Mon Jul 22 13:53:08 2024 #>    Finding features with with RNA.OS stats: Mon Jul 22 13:53:08 2024 #> Found 120 rows of stats: Mon Jul 22 13:53:08 2024 #> Merging stats with feature-sets: Mon Jul 22 13:53:08 2024 #> Merged feature-set stat rows: 120 #> Ordering and indexing feature sets: Mon Jul 22 13:53:08 2024 #>   Cleaning up beam.stat matrices:Mon Jul 22 13:53:08 2024 #>    Working on matrix 1 of 6: Mon Jul 22 13:53:08 2024 #>    Working on matrix 2 of 6: Mon Jul 22 13:53:08 2024 #>    Working on matrix 3 of 6: Mon Jul 22 13:53:08 2024 #>    Working on matrix 4 of 6: Mon Jul 22 13:53:08 2024 #>    Working on matrix 5 of 6: Mon Jul 22 13:53:08 2024 #>    Working on matrix 6 of 6: Mon Jul 22 13:53:08 2024 #> Computing p-value for feature set 1 of 34: Mon Jul 22 13:53:08 2024 #> 13ENSG00000081760 #> Computing p-value for feature set 26 of 34: Mon Jul 22 13:53:08 2024 #> 9496ENSG00000229835 #> Finished computing p-values at: Mon Jul 22 13:53:08 2024 #> Minimum q-value is 0.106439437831269 #> Creating set p-value data frame. #> Done creating data frame. #> Creating list for output. test.feat.pvals <- compute_feature_pvalues(beam.stats=beam_stats) #> Computing feature p-values for stat matrix 1 of 6: Mon Jul 22 13:53:08 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 2 of 6: Mon Jul 22 13:53:08 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 3 of 6: Mon Jul 22 13:53:08 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 4 of 6: Mon Jul 22 13:53:08 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 5 of 6: Mon Jul 22 13:53:08 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 6 of 6: Mon Jul 22 13:53:08 2024 #>   This matrix has 20 features. plot.specs <- prep_beam_plot(beam.data=beam_stats$beam.data,                              beam.specs=beam_stats$beam.specs) test.plot <- plot_beam_clin(beam.result=beam_stats, beam.specs=plot.specs,                             beam.set.pvals=test.pvals,                             beam.feat.pvals=test.feat.pvals,                             set.id=\"ENSG00000099810\", gene.name=\"MTAP\",                             pair.type=NULL, number.pairs=1, n.col=4,                             n.row=NULL, title.size=11,                             pair.order=\"omic\", endpt.order=NULL) #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://annaseffernick.github.io/BEAMR/reference/plot_feat_clin.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot BEAM Feature — plot_feat_clin","title":"Plot BEAM Feature — plot_feat_clin","text":"plot_feat_clin produces matrix feature level clinical plots specific feature.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/plot_feat_clin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot BEAM Feature — plot_feat_clin","text":"","code":"plot_feat_clin(   feat.id,   beam.result,   beam.specs = NULL,   beam.set.pvals,   beam.feat.pvals,   n.row = NULL,   n.col = NULL )"},{"path":"https://annaseffernick.github.io/BEAMR/reference/plot_feat_clin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot BEAM Feature — plot_feat_clin","text":"feat.id character specifying name feature. Must beam.result$beam.data$set.data beam.result beam.stats object compute_beam_stats beam.specs data.frame. Default NULL, case beam.result$beam.specs used. Otherwise can input beam.specs  data.frame must contain name, mtx, mdl, plot columns. beam.set.pvals list containing BEAMR set p-values compute_set_pvalues. beam.feat.pvals list containing feature-level p-values compute_feature_pvalues. n.row numeric. Specify number rows plot layout; default NULL automatically define number rows number columns specified. n.col numeric. Specify number columns plot layout; default NULL use number omics types.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/plot_feat_clin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot BEAM Feature — plot_feat_clin","text":"figure (ggarrange object)","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/plot_feat_clin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot BEAM Feature — plot_feat_clin","text":"","code":"data(beam_stats) test.pvals <- compute_set_pvalues(beam.stats=beam_stats) #> Preparing bootstrap results for calculating feature set p-values: Mon Jul 22 13:53:10 2024 #> Finding stats for each data matrix:Mon Jul 22 13:53:10 2024 #>   Finding stats for data matrix Lesion: Mon Jul 22 13:53:10 2024 #>    Finding features with with Lesion.MRD29 stats: Mon Jul 22 13:53:10 2024 #>    Finding features with with Lesion.EFS stats: Mon Jul 22 13:53:10 2024 #>    Finding features with with Lesion.OS stats: Mon Jul 22 13:53:10 2024 #>   Finding stats for data matrix RNA: Mon Jul 22 13:53:10 2024 #>    Finding features with with RNA.MRD29 stats: Mon Jul 22 13:53:10 2024 #>    Finding features with with RNA.EFS stats: Mon Jul 22 13:53:10 2024 #>    Finding features with with RNA.OS stats: Mon Jul 22 13:53:10 2024 #> Found 120 rows of stats: Mon Jul 22 13:53:10 2024 #> Merging stats with feature-sets: Mon Jul 22 13:53:10 2024 #> Merged feature-set stat rows: 120 #> Ordering and indexing feature sets: Mon Jul 22 13:53:10 2024 #>   Cleaning up beam.stat matrices:Mon Jul 22 13:53:10 2024 #>    Working on matrix 1 of 6: Mon Jul 22 13:53:10 2024 #>    Working on matrix 2 of 6: Mon Jul 22 13:53:10 2024 #>    Working on matrix 3 of 6: Mon Jul 22 13:53:10 2024 #>    Working on matrix 4 of 6: Mon Jul 22 13:53:10 2024 #>    Working on matrix 5 of 6: Mon Jul 22 13:53:10 2024 #>    Working on matrix 6 of 6: Mon Jul 22 13:53:10 2024 #> Computing p-value for feature set 1 of 34: Mon Jul 22 13:53:10 2024 #> 13ENSG00000081760 #> Computing p-value for feature set 26 of 34: Mon Jul 22 13:53:10 2024 #> 9496ENSG00000229835 #> Finished computing p-values at: Mon Jul 22 13:53:10 2024 #> Minimum q-value is 0.106439437831269 #> Creating set p-value data frame. #> Done creating data frame. #> Creating list for output. test.feat.pvals <- compute_feature_pvalues(beam.stats=beam_stats) #> Computing feature p-values for stat matrix 1 of 6: Mon Jul 22 13:53:10 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 2 of 6: Mon Jul 22 13:53:10 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 3 of 6: Mon Jul 22 13:53:10 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 4 of 6: Mon Jul 22 13:53:10 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 5 of 6: Mon Jul 22 13:53:10 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 6 of 6: Mon Jul 22 13:53:10 2024 #>   This matrix has 20 features. plot.specs <- prep_beam_plot(beam.data=beam_stats$beam.data, beam.specs=beam_stats$beam.specs) test.plot <- plot_feat_clin(beam.result=beam_stats, beam.specs=plot.specs,                             beam.set.pvals=test.pvals, beam.feat.pvals=test.feat.pvals,                             feat.id=\"ENSG00000227443_loss\",                             n.col=2, n.row=NULL)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/prep_beam_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for BEAM analysis — prep_beam_data","title":"Prepare data for BEAM analysis — prep_beam_data","text":"Prepare data BEAM analysis","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/prep_beam_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for BEAM analysis — prep_beam_data","text":"","code":"prep_beam_data(   main.data,   mtx.data,   mtx.anns = NULL,   set.data = NULL,   set.anns = NULL,   n.boot = 1000,   seed = NULL )"},{"path":"https://annaseffernick.github.io/BEAMR/reference/prep_beam_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for BEAM analysis — prep_beam_data","text":"main.data data.frame mtx.data list, element matrix mtx.anns list, element data.frame set.data data.frame columns set.id, mtx.id, row.id set.anns data frame set.id columns n.boot Number bootstraps seed Initial seed random number generation","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/prep_beam_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for BEAM analysis — prep_beam_data","text":"beam.data object, list main.data, mtx.data, mtx.anns, anns.mtch, set.data, set.anns, boot.index","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/prep_beam_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data for BEAM analysis — prep_beam_data","text":"","code":"data(clinf) data(omicdat) data(omicann) data(setdat) test.beam.data <- prep_beam_data(main.data=clinf, mtx.data=omicdat,                                  mtx.anns=omicann, set.data=setdat,                                  set.anns=NULL, n.boot=10, seed=123) #> Checking inputs: Mon Jul 22 13:53:11 2024 #>   Checking that each element of mtx.data is a matrix: Mon Jul 22 13:53:11 2024 #>   Checking that each element of mtx.anns is a data.frame: Mon Jul 22 13:53:11 2024 #> Aligning main.data with each mtx.data: Mon Jul 22 13:53:11 2024 #>   Working on mtx.data Lesion (1 of 2): Mon Jul 22 13:53:11 2024 #>   Working on mtx.data RNA (2 of 2): Mon Jul 22 13:53:11 2024 #> Warning: Some ids not matched; returning NAs for those. #>   Working on mtx.anns: Mon Jul 22 13:53:11 2024 #>   Matching matrix 1 with annotations: Mon Jul 22 13:53:11 2024 #>   Matching matrix 2 with annotations: Mon Jul 22 13:53:11 2024 #>   Checking set.data: Mon Jul 22 13:53:11 2024 #>     Ordering and indexing set.data: Mon Jul 22 13:53:11 2024 #>     Checking section 1 of 40 of set.data: Mon Jul 22 13:53:11 2024 #> Generating bootstrap index matrix: Mon Jul 22 13:53:11 2024 #> Packaging and returning result: Mon Jul 22 13:53:11 2024"},{"path":"https://annaseffernick.github.io/BEAMR/reference/prep_beam_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare for BEAM plotting — prep_beam_plot","title":"Prepare for BEAM plotting — prep_beam_plot","text":"Add \"plot\" column beam.specs, includes string plot commands.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/prep_beam_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare for BEAM plotting — prep_beam_plot","text":"","code":"prep_beam_plot(beam.data, beam.specs)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/prep_beam_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare for BEAM plotting — prep_beam_plot","text":"beam.data Result prep.beam.data beam.specs data.frame strings columns name, mtx, mdl (string R model mtx.row)","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/prep_beam_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare for BEAM plotting — prep_beam_plot","text":"updated beam.specs object includes column \"plot\"","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/prep_beam_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare for BEAM plotting — prep_beam_plot","text":"","code":"data(clinf) data(omicdat) data(omicann) data(setdat) test.beam.data <- prep_beam_data(main.data=clinf, mtx.data=omicdat,                                  mtx.anns=omicann, set.data=setdat,                                  set.anns=NULL, n.boot=10, seed=123) #> Checking inputs: Mon Jul 22 13:53:11 2024 #>   Checking that each element of mtx.data is a matrix: Mon Jul 22 13:53:11 2024 #>   Checking that each element of mtx.anns is a data.frame: Mon Jul 22 13:53:11 2024 #> Aligning main.data with each mtx.data: Mon Jul 22 13:53:11 2024 #>   Working on mtx.data Lesion (1 of 2): Mon Jul 22 13:53:11 2024 #>   Working on mtx.data RNA (2 of 2): Mon Jul 22 13:53:11 2024 #> Warning: Some ids not matched; returning NAs for those. #>   Working on mtx.anns: Mon Jul 22 13:53:11 2024 #>   Matching matrix 1 with annotations: Mon Jul 22 13:53:11 2024 #>   Matching matrix 2 with annotations: Mon Jul 22 13:53:11 2024 #>   Checking set.data: Mon Jul 22 13:53:11 2024 #>     Ordering and indexing set.data: Mon Jul 22 13:53:11 2024 #>     Checking section 1 of 40 of set.data: Mon Jul 22 13:53:11 2024 #> Generating bootstrap index matrix: Mon Jul 22 13:53:11 2024 #> Packaging and returning result: Mon Jul 22 13:53:11 2024 specs <- prep_beam_specs(beam.data=test.beam.data, endpts=c(\"MRD29\", \"EFS\", \"OS\"),                          firth=TRUE) #> MRD29 is continuous, fitting lm #> EFS is survival endpoint, fitting coxphf2 #> OS is survival endpoint, fitting coxphf2 plot.specs <- prep_beam_plot(beam.data=test.beam.data, beam.specs=specs)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/prep_beam_specs.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare beam.specs — prep_beam_specs","title":"Prepare beam.specs — prep_beam_specs","text":"Prepare beam.specs data.frame BEAM model fitting. Specifies univariate models needed compute BEAMR set p-values.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/prep_beam_specs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare beam.specs — prep_beam_specs","text":"","code":"prep_beam_specs(   beam.data,   endpts,   firth = TRUE,   adjvars = NULL,   endptmdl = NULL )"},{"path":"https://annaseffernick.github.io/BEAMR/reference/prep_beam_specs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare beam.specs — prep_beam_specs","text":"beam.data beam.data object prep_beam_data endpts vector endpoint variable names main.data firth logical value. TRUE (defaul) fit Firth penalized Cox model account monotone likelihood presence rare events predictors. FALSE fit usual Cox model. adjvars Default NULL, optional vector adjustment variable names main.data endptmdl Optional model specification data.frame endpoint name column called \"endpt\" model string column called \"mdl\"","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/prep_beam_specs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare beam.specs — prep_beam_specs","text":"beam.specs object, data.frame specifying omics-endpoint association models fit","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/prep_beam_specs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare beam.specs — prep_beam_specs","text":"","code":"data(clinf) data(omicdat) data(omicann) data(setdat) test.beam.data <- prep_beam_data(main.data=clinf, mtx.data=omicdat,                                  mtx.anns=omicann, set.data=setdat,                                  set.anns=NULL, n.boot=10, seed=123) #> Checking inputs: Mon Jul 22 13:53:11 2024 #>   Checking that each element of mtx.data is a matrix: Mon Jul 22 13:53:11 2024 #>   Checking that each element of mtx.anns is a data.frame: Mon Jul 22 13:53:11 2024 #> Aligning main.data with each mtx.data: Mon Jul 22 13:53:11 2024 #>   Working on mtx.data Lesion (1 of 2): Mon Jul 22 13:53:11 2024 #>   Working on mtx.data RNA (2 of 2): Mon Jul 22 13:53:11 2024 #> Warning: Some ids not matched; returning NAs for those. #>   Working on mtx.anns: Mon Jul 22 13:53:11 2024 #>   Matching matrix 1 with annotations: Mon Jul 22 13:53:11 2024 #>   Matching matrix 2 with annotations: Mon Jul 22 13:53:11 2024 #>   Checking set.data: Mon Jul 22 13:53:12 2024 #>     Ordering and indexing set.data: Mon Jul 22 13:53:12 2024 #>     Checking section 1 of 40 of set.data: Mon Jul 22 13:53:12 2024 #> Generating bootstrap index matrix: Mon Jul 22 13:53:12 2024 #> Packaging and returning result: Mon Jul 22 13:53:12 2024 #Without adjustment prep_beam_specs(beam.data=test.beam.data, endpts=c(\"MRD29\", \"OS\", \"EFS\"),                 firth=TRUE) #> MRD29 is continuous, fitting lm #> OS is survival endpoint, fitting coxphf2 #> EFS is survival endpoint, fitting coxphf2 #>           name    mtx                                         mdl #> 1 Lesion.MRD29 Lesion    lm(MRD29~mtx.row,data=main.data,model=T) #> 2    RNA.MRD29    RNA    lm(MRD29~mtx.row,data=main.data,model=T) #> 3    Lesion.OS Lesion  coxphf2(OS~mtx.row,data=main.data,model=T) #> 4       RNA.OS    RNA  coxphf2(OS~mtx.row,data=main.data,model=T) #> 5   Lesion.EFS Lesion coxphf2(EFS~mtx.row,data=main.data,model=T) #> 6      RNA.EFS    RNA coxphf2(EFS~mtx.row,data=main.data,model=T) # With adjustment prep_beam_specs(beam.data=test.beam.data, endpts=c(\"OS\", \"EFS\"),                 adjvars=c(\"MRD29\"), firth=TRUE) #> OS is survival endpoint, fitting coxphf2 #> EFS is survival endpoint, fitting coxphf2 #>         name    mtx                                               mdl #> 1  Lesion.OS Lesion  coxphf2(OS~mtx.row+MRD29,data=main.data,model=T) #> 2     RNA.OS    RNA  coxphf2(OS~mtx.row+MRD29,data=main.data,model=T) #> 3 Lesion.EFS Lesion coxphf2(EFS~mtx.row+MRD29,data=main.data,model=T) #> 4    RNA.EFS    RNA coxphf2(EFS~mtx.row+MRD29,data=main.data,model=T)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/print.beam.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary information about a beam.data object — print.beam.data","title":"Print summary information about a beam.data object — print.beam.data","text":"Print summary information beam.data object","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/print.beam.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary information about a beam.data object — print.beam.data","text":"","code":"# S3 method for class 'beam.data' print(x, ...)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/print.beam.data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary information about a beam.data object — print.beam.data","text":"x object class \"beam.data\" ... arguments passed methods","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/print.beam.data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary information about a beam.data object — print.beam.data","text":"Messages beam.data object","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/print.beam.data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print summary information about a beam.data object — print.beam.data","text":"","code":"data(beam_dat) print(beam_dat) #> main.data: 265 rows and 8 columns.  #>   #>            ID MRD29 RNA.clm Lesion.clm Lesion.id #> PARASZ PARASZ  0.00      46         21    PARASZ #> PARAYM PARAYM  0.00      47        108    PARAYM #> PARCVM PARCVM  0.00      15         84    PARCVM #> PAREGZ PAREGZ  0.49     170        142    PAREGZ #> PARFDL PARFDL  0.00     184        175    PARFDL #>  #> mtx.data:  #>   mtx.data Lesion: 265 columns linked to 265 rows of main.data.  #>   mtx.data RNA: 264 columns linked to 264 rows of main.data.  #>  #> Lesion:  #>                          PARWNW PASXUC PATXNR PASYIS PATBGC #> ENSG00000264545_loss          1      1      1      1      0 #> ENSG00000147889_loss          1      1      1      1      0 #> ENSG00000224854_loss          1      1      1      1      0 #> ENSG00000148400_mutation      1      1      1      1      0 #> ENSG00000099810_loss          1      1      1      1      0 #>  #> RNA:  #>                    PARFIH     PARFPJ     PARFXJ     PARKLK     PARLJA #> ENSG00000121410 0.4976379 0.29994795 1.13973142 0.32584690 0.35940872 #> ENSG00000148584 0.0000000 0.00000000 0.00000000 0.00000000 0.00000000 #> ENSG00000175899 0.0176369 0.11316706 0.02913480 0.00992041 0.02672925 #> ENSG00000166535 0.0000000 0.02261638 0.01278318 0.01735184 0.00000000 #> ENSG00000184389 0.1067503 1.46126661 0.32734246 0.56042150 0.49385225 #>  #> mtx.anns:  #>   Lesion: 20 rows and 2 columns.  #>   RNA: 20 rows and 2 columns.  #>  #> Lesion:  #>                         id            gene #> 1     ENSG00000264545_loss ENSG00000264545 #> 2     ENSG00000147889_loss ENSG00000147889 #> 3     ENSG00000224854_loss ENSG00000224854 #> 4 ENSG00000148400_mutation ENSG00000148400 #> 5     ENSG00000099810_loss ENSG00000099810 #>  #> RNA:  #>                id            gene #> 1 ENSG00000121410 ENSG00000121410 #> 2 ENSG00000148584 ENSG00000148584 #> 3 ENSG00000175899 ENSG00000175899 #> 4 ENSG00000166535 ENSG00000166535 #> 5 ENSG00000184389 ENSG00000184389 #>  #> anns.mtch:  #>   mtx.data mtx.anns id.clm nrow.mtx nrow.ann nrow.map #> 1   Lesion   Lesion     id       20       20       20 #> 2      RNA      RNA     id       20       20       20 #>  #> set.data: 40 rows assigning sets to data.mtx rows.  #>             set.id mtx.id               row.id #> 9  ENSG00000081760    RNA      ENSG00000081760 #> 8  ENSG00000094914    RNA      ENSG00000094914 #> 25 ENSG00000099810 Lesion ENSG00000099810_loss #> 19 ENSG00000099810    RNA      ENSG00000099810 #> 14 ENSG00000109576    RNA      ENSG00000109576 #> 10 ENSG00000114771    RNA      ENSG00000114771 #>  #>   #> set.anns:  rows of set annotations. #>   #> boot.index: 11 rows and 265 columns of bootstrap indices.  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    2    3    4    5 #> [2,]  179   14  195  118  229 #> [3,]  108    8  114  261   29 #> [4,]   55   19  241  218  155 #> [5,]  145  200  211   69   46"},{"path":"https://annaseffernick.github.io/BEAMR/reference/print.beam.stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary information about beam.stats object — print.beam.stats","title":"Print summary information about beam.stats object — print.beam.stats","text":"Print summary information beam.stats object","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/print.beam.stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary information about beam.stats object — print.beam.stats","text":"","code":"# S3 method for class 'beam.stats' print(x, ...)"},{"path":"https://annaseffernick.github.io/BEAMR/reference/print.beam.stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary information about beam.stats object — print.beam.stats","text":"x object class \"beam.stats\" ... arguments passed methods","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/print.beam.stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary information about beam.stats object — print.beam.stats","text":"Messages beam.data object","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/print.beam.stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print summary information about beam.stats object — print.beam.stats","text":"","code":"data(beam_stats) print(beam_stats) #> Contains 6 association estimate matrices with 10 bootstraps:  #>   Association Estimate Matrix of Lesion with MRD29 has dimensions 20 x 11.  #>   Association Estimate Matrix of RNA with MRD29 has dimensions 20 x 11.  #>   Association Estimate Matrix of Lesion with EFS has dimensions 20 x 11.  #>   Association Estimate Matrix of RNA with EFS has dimensions 20 x 11.  #>   Association Estimate Matrix of Lesion with OS has dimensions 20 x 11.  #>   Association Estimate Matrix of RNA with OS has dimensions 20 x 11.  #>  #> Example Association Estimate Matrix for Lesion with MRD29:  #>                               boot_0      boot_1      boot_2      boot_3 #> ENSG00000264545_loss     -0.19093600 -0.18285072 -0.21417250 -0.20583809 #> ENSG00000147889_loss     -0.19931154 -0.17555327 -0.20297360 -0.19104882 #> ENSG00000224854_loss     -0.18613078 -0.17555327 -0.21375800 -0.18794477 #> ENSG00000148400_mutation -0.02983458 -0.03084684  0.05543433 -0.01137685 #> ENSG00000099810_loss     -0.13672414 -0.12616440 -0.16711568 -0.11536782 #>                                boot_4 #> ENSG00000264545_loss     -0.156257583 #> ENSG00000147889_loss     -0.210577002 #> ENSG00000224854_loss     -0.163050513 #> ENSG00000148400_mutation -0.001250098 #> ENSG00000099810_loss     -0.090666306 #>  #> Example Association Estimate Matrix for RNA with MRD29:  #>                       boot_0       boot_1      boot_2       boot_3      boot_4 #> ENSG00000121410  0.045547007  0.004894953  0.11539090  0.091368164  0.12737124 #> ENSG00000148584 -0.043899068 -0.027183517 -0.03688248 -0.066976684 -0.06705541 #> ENSG00000175899  0.071592760  0.035710522  0.08890343  0.060304200  0.04032931 #> ENSG00000166535  0.000296431 -0.011542505 -0.07000542  0.003024411  0.03280950 #> ENSG00000184389  0.088934788  0.053931057  0.12269236  0.205216952  0.11770464 #>  #> Example Association Estimate Matrix for Lesion with EFS:  #>                                boot_0      boot_1       boot_2      boot_3 #> ENSG00000264545_loss      0.311047946 0.192434740 -0.027644863  0.45783281 #> ENSG00000147889_loss      0.355335350 0.212469747 -0.005443877  0.49058097 #> ENSG00000224854_loss      0.358707580 0.212469747  0.010605097  0.52911969 #> ENSG00000148400_mutation -0.008535379 0.101993852 -0.185038910 -0.09593391 #> ENSG00000099810_loss     -0.015810223 0.006761143 -0.488404478 -0.18680785 #>                             boot_4 #> ENSG00000264545_loss     0.6079674 #> ENSG00000147889_loss     0.6584991 #> ENSG00000224854_loss     0.6237131 #> ENSG00000148400_mutation 0.1068464 #> ENSG00000099810_loss     0.2182788 #>  #> Example Association Estimate Matrix for RNA with EFS:  #>                      boot_0     boot_1      boot_2     boot_3      boot_4 #> ENSG00000121410  0.05921417  0.1825319  0.34583467  0.1120400  0.07337122 #> ENSG00000148584  0.17012792  0.2792833  0.35866190  0.2208551 -0.50231550 #> ENSG00000175899 -0.11536335 -0.1158022 -0.02586119 -5.6659243 -3.05803752 #> ENSG00000166535  0.24454397  0.3871298  0.45451663  0.2155649  0.19137130 #> ENSG00000184389 -0.13690629 -0.2247154 -0.12818200 -0.2024793 -0.02224107 #>  #> Example Association Estimate Matrix for Lesion with OS:  #>                              boot_0     boot_1     boot_2       boot_3 #> ENSG00000264545_loss      0.8932939 0.82087274  0.7774685  1.007661292 #> ENSG00000147889_loss      0.9489993 0.84854596  0.8068623  1.045121725 #> ENSG00000224854_loss      0.9563505 0.84854596  0.8400789  1.095728463 #> ENSG00000148400_mutation -0.0989406 0.04244735  0.1444102 -0.081025546 #> ENSG00000099810_loss      0.3328451 0.53394399 -0.1096147  0.003899453 #>                               boot_4 #> ENSG00000264545_loss     1.116271049 #> ENSG00000147889_loss     1.172808630 #> ENSG00000224854_loss     1.139336521 #> ENSG00000148400_mutation 0.008572771 #> ENSG00000099810_loss     0.583670072 #>  #> Example Association Estimate Matrix for RNA with OS:  #>                      boot_0      boot_1      boot_2      boot_3       boot_4 #> ENSG00000121410 -0.06064136  0.08833406  0.19740235 -0.23032144  0.042520410 #> ENSG00000148584  0.05061313  0.19634699  0.13935280 -0.04349620 -0.308207853 #> ENSG00000175899  0.02594285  0.03512339  0.06672908 -0.11478157 -0.057850041 #> ENSG00000166535 -0.09119894 -0.16775731 -0.97860178 -0.05163522  0.036242601 #> ENSG00000184389 -0.13155891 -0.34544421 -0.27764175 -0.10397644  0.009883494 #>  #> Example Endpoint Data:  #>        MRD29   EFS    OS #> PARASZ  0.00 3087+ 3087+ #> PARAYM  0.00 3399+ 3399+ #> PARCVM  0.00 2424+ 2424+ #> PAREGZ  0.49 3087+ 3087+ #> PARFDL  0.00 3075+ 3075+ #>  #> BEAM Model Specifications:  #>           name    mtx                                         mdl #> 1 Lesion.MRD29 Lesion    lm(MRD29~mtx.row,data=main.data,model=T) #> 2    RNA.MRD29    RNA    lm(MRD29~mtx.row,data=main.data,model=T) #> 3   Lesion.EFS Lesion coxphf2(EFS~mtx.row,data=main.data,model=T) #> 4      RNA.EFS    RNA coxphf2(EFS~mtx.row,data=main.data,model=T) #> 5    Lesion.OS Lesion  coxphf2(OS~mtx.row,data=main.data,model=T) #> 6       RNA.OS    RNA  coxphf2(OS~mtx.row,data=main.data,model=T) #>  #> BEAM data used to create Association Estimate Matrices:  #> main.data: 265 rows and 8 columns.  #>   #>            ID MRD29 RNA.clm Lesion.clm Lesion.id #> PARASZ PARASZ  0.00      46         21    PARASZ #> PARAYM PARAYM  0.00      47        108    PARAYM #> PARCVM PARCVM  0.00      15         84    PARCVM #> PAREGZ PAREGZ  0.49     170        142    PAREGZ #> PARFDL PARFDL  0.00     184        175    PARFDL #>  #> mtx.data:  #>   mtx.data Lesion: 265 columns linked to 265 rows of main.data.  #>   mtx.data RNA: 264 columns linked to 264 rows of main.data.  #>  #> Lesion:  #>                          PARWNW PASXUC PATXNR PASYIS PATBGC #> ENSG00000264545_loss          1      1      1      1      0 #> ENSG00000147889_loss          1      1      1      1      0 #> ENSG00000224854_loss          1      1      1      1      0 #> ENSG00000148400_mutation      1      1      1      1      0 #> ENSG00000099810_loss          1      1      1      1      0 #>  #> RNA:  #>                    PARFIH     PARFPJ     PARFXJ     PARKLK     PARLJA #> ENSG00000121410 0.4976379 0.29994795 1.13973142 0.32584690 0.35940872 #> ENSG00000148584 0.0000000 0.00000000 0.00000000 0.00000000 0.00000000 #> ENSG00000175899 0.0176369 0.11316706 0.02913480 0.00992041 0.02672925 #> ENSG00000166535 0.0000000 0.02261638 0.01278318 0.01735184 0.00000000 #> ENSG00000184389 0.1067503 1.46126661 0.32734246 0.56042150 0.49385225 #>  #> mtx.anns:  #>   Lesion: 20 rows and 2 columns.  #>   RNA: 20 rows and 2 columns.  #>  #> Lesion:  #>                         id            gene #> 1     ENSG00000264545_loss ENSG00000264545 #> 2     ENSG00000147889_loss ENSG00000147889 #> 3     ENSG00000224854_loss ENSG00000224854 #> 4 ENSG00000148400_mutation ENSG00000148400 #> 5     ENSG00000099810_loss ENSG00000099810 #>  #> RNA:  #>                id            gene #> 1 ENSG00000121410 ENSG00000121410 #> 2 ENSG00000148584 ENSG00000148584 #> 3 ENSG00000175899 ENSG00000175899 #> 4 ENSG00000166535 ENSG00000166535 #> 5 ENSG00000184389 ENSG00000184389 #>  #> anns.mtch:  #>   mtx.data mtx.anns id.clm nrow.mtx nrow.ann nrow.map #> 1   Lesion   Lesion     id       20       20       20 #> 2      RNA      RNA     id       20       20       20 #>  #> set.data: 40 rows assigning sets to data.mtx rows.  #>             set.id mtx.id               row.id #> 9  ENSG00000081760    RNA      ENSG00000081760 #> 8  ENSG00000094914    RNA      ENSG00000094914 #> 25 ENSG00000099810 Lesion ENSG00000099810_loss #> 19 ENSG00000099810    RNA      ENSG00000099810 #> 14 ENSG00000109576    RNA      ENSG00000109576 #> 10 ENSG00000114771    RNA      ENSG00000114771 #>  #>   #> set.anns:  rows of set annotations. #>   #> boot.index: 11 rows and 265 columns of bootstrap indices.  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    2    3    4    5 #> [2,]  179   14  195  118  229 #> [3,]  108    8  114  261   29 #> [4,]   55   19  241  218  155 #> [5,]  145  200  211   69   46"},{"path":"https://annaseffernick.github.io/BEAMR/reference/setdat.html","id":null,"dir":"Reference","previous_headings":"","what":"Map of Pediatric Data from COG trial AALL0434 — setdat","title":"Map of Pediatric Data from COG trial AALL0434 — setdat","text":"Map annotation omic data subset clinical data pediatric young adult t-lineage acute lymphoblastic leukmia patients Children's Oncology Group trial AALL0434, published Liu et al., 2017 Nature Genetics","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/setdat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map of Pediatric Data from COG trial AALL0434 — setdat","text":"","code":"setdat"},{"path":[]},{"path":"https://annaseffernick.github.io/BEAMR/reference/setdat.html","id":"setdat","dir":"Reference","previous_headings":"","what":"setdat","title":"Map of Pediatric Data from COG trial AALL0434 — setdat","text":"data frame 40 rows 3 columns set.id Ensembl ID defines gene-feature set mtx.id Name omic matrix corresponding feature data can found row.id Feature name corresponding omic matrix","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/setdat.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Map of Pediatric Data from COG trial AALL0434 — setdat","text":"https://www.nature.com/articles/ng.3909","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/specs.html","id":null,"dir":"Reference","previous_headings":"","what":"Pediatric T-ALL BEAMR Analysis Specs Data from COG trial AALL0434 — specs","title":"Pediatric T-ALL BEAMR Analysis Specs Data from COG trial AALL0434 — specs","text":"beam.specs object used example beam analyses","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/specs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pediatric T-ALL BEAMR Analysis Specs Data from COG trial AALL0434 — specs","text":"","code":"specs"},{"path":[]},{"path":"https://annaseffernick.github.io/BEAMR/reference/specs.html","id":"specs","dir":"Reference","previous_headings":"","what":"specs","title":"Pediatric T-ALL BEAMR Analysis Specs Data from COG trial AALL0434 — specs","text":"data frame 6 rows 3 columns: name Analysis name omic endpoint mtx Name omics matrix used analysis mdl Regression model","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/specs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pediatric T-ALL BEAMR Analysis Specs Data from COG trial AALL0434 — specs","text":"NA","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/subset_beam_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset beam.stats Result — subset_beam_result","title":"Subset beam.stats Result — subset_beam_result","text":"Filter beam.stats object compute_beam_stats various filtering criteria. Default filter top 50 sets smallest q-value. least one filtering criteria must specified. Can also use intersection union multiple criteria.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/subset_beam_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset beam.stats Result — subset_beam_result","text":"","code":"subset_beam_result(   beam.result,   beam.set.pvals = NULL,   beam.feat.pvals = NULL,   mtx.rows = NULL,   set.ids = NULL,   endpts = NULL,   omics = NULL,   p.limit = NULL,   q.limit = NULL,   p.feat.limit = NULL,   q.feat.limit = NULL,   intersect = TRUE,   recalc = FALSE )"},{"path":"https://annaseffernick.github.io/BEAMR/reference/subset_beam_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset beam.stats Result — subset_beam_result","text":"beam.result beam.stats object compute_beam_stats beam.set.pvals list containing BEAMR set p-values compute_set_pvalues; required p.limit q.limit specified. beam.feat.pvals list containing feature-level p-values compute_feature_pvalues; required p.feat.limit q.feat.limit specified. mtx.rows list vectors feature names corresponding row.id set.data. List names correspond mtx.id set.data. specified, filter sets containing least one features. set.ids character vector set.ids. specified, filter sets. endpts character vector endpoint names. specified, filter sets correspond endpoints. omics character vector omics names. specified, fitler sets correspond omics. p.limit numeric value. specified, determine mtx.rows threshold p<1 top p sets p>1. q.limit numeric value. specified, determine mtx.rows threshold q <1 top q sets q>1. p.feat.limit numeric value. specified, determine mtx.rows threshold p.feat<1 top p.feat sets p.feat>1 (feature p-values). q.feat.limit numeric value. specified, determine mtx.rows threshold q.feat<1 top q.feat sets q.feat>1. intersect logical value. Default TRUE. TRUE, use intersection specified criteria. FALSE use union specified criteria. recalc logical value. Default FALSE. TRUE, recalculate p-values. FALSE use original set p-values..","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/subset_beam_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset beam.stats Result — subset_beam_result","text":"list filtered beam.stats object, updated beam.set.pvals, filtered beam.feat.pvals.","code":""},{"path":"https://annaseffernick.github.io/BEAMR/reference/subset_beam_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset beam.stats Result — subset_beam_result","text":"","code":"data(beam_stats) test.pvals <- compute_set_pvalues(beam.stats=beam_stats) #> Preparing bootstrap results for calculating feature set p-values: Mon Jul 22 13:53:12 2024 #> Finding stats for each data matrix:Mon Jul 22 13:53:12 2024 #>   Finding stats for data matrix Lesion: Mon Jul 22 13:53:12 2024 #>    Finding features with with Lesion.MRD29 stats: Mon Jul 22 13:53:12 2024 #>    Finding features with with Lesion.EFS stats: Mon Jul 22 13:53:12 2024 #>    Finding features with with Lesion.OS stats: Mon Jul 22 13:53:12 2024 #>   Finding stats for data matrix RNA: Mon Jul 22 13:53:12 2024 #>    Finding features with with RNA.MRD29 stats: Mon Jul 22 13:53:12 2024 #>    Finding features with with RNA.EFS stats: Mon Jul 22 13:53:12 2024 #>    Finding features with with RNA.OS stats: Mon Jul 22 13:53:12 2024 #> Found 120 rows of stats: Mon Jul 22 13:53:12 2024 #> Merging stats with feature-sets: Mon Jul 22 13:53:12 2024 #> Merged feature-set stat rows: 120 #> Ordering and indexing feature sets: Mon Jul 22 13:53:12 2024 #>   Cleaning up beam.stat matrices:Mon Jul 22 13:53:12 2024 #>    Working on matrix 1 of 6: Mon Jul 22 13:53:12 2024 #>    Working on matrix 2 of 6: Mon Jul 22 13:53:12 2024 #>    Working on matrix 3 of 6: Mon Jul 22 13:53:12 2024 #>    Working on matrix 4 of 6: Mon Jul 22 13:53:12 2024 #>    Working on matrix 5 of 6: Mon Jul 22 13:53:12 2024 #>    Working on matrix 6 of 6: Mon Jul 22 13:53:12 2024 #> Computing p-value for feature set 1 of 34: Mon Jul 22 13:53:12 2024 #> 13ENSG00000081760 #> Computing p-value for feature set 26 of 34: Mon Jul 22 13:53:12 2024 #> 9496ENSG00000229835 #> Finished computing p-values at: Mon Jul 22 13:53:12 2024 #> Minimum q-value is 0.106439437831269 #> Creating set p-value data frame. #> Done creating data frame. #> Creating list for output. test.feat.pvals <- compute_feature_pvalues(beam.stats=beam_stats) #> Computing feature p-values for stat matrix 1 of 6: Mon Jul 22 13:53:12 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 2 of 6: Mon Jul 22 13:53:12 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 3 of 6: Mon Jul 22 13:53:12 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 4 of 6: Mon Jul 22 13:53:12 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 5 of 6: Mon Jul 22 13:53:12 2024 #>   This matrix has 20 features. #> Computing feature p-values for stat matrix 6 of 6: Mon Jul 22 13:53:12 2024 #>   This matrix has 20 features. filt.beam.stats <- subset_beam_result(beam_stats, test.pvals, test.feat.pvals,                                       endpts=c(\"EFS\",\"OS\"), q.limit=10, intersect=TRUE,                                       recalc=FALSE) #>   Working on mtx.anns: Mon Jul 22 13:53:12 2024 #>   Matching matrix 1 with annotations: Mon Jul 22 13:53:12 2024 #>   Matching matrix 2 with annotations: Mon Jul 22 13:53:12 2024 #> Joining with `by = join_by(set.id, mtx.id, row.id)` #>   Working on mtx.anns: Mon Jul 22 13:53:12 2024 #>   Matching matrix 1 with annotations: Mon Jul 22 13:53:12 2024 #>   Matching matrix 2 with annotations: Mon Jul 22 13:53:12 2024 #> Computing feature p-values for stat matrix 1 of 4: Mon Jul 22 13:53:12 2024 #>   This matrix has 6 features. #> Computing feature p-values for stat matrix 2 of 4: Mon Jul 22 13:53:12 2024 #>   This matrix has 7 features. #> Computing feature p-values for stat matrix 3 of 4: Mon Jul 22 13:53:12 2024 #>   This matrix has 6 features. #> Computing feature p-values for stat matrix 4 of 4: Mon Jul 22 13:53:12 2024 #>   This matrix has 7 features. #> Computing feature p-values for stat matrix 1 of 4: Mon Jul 22 13:53:12 2024 #>   This matrix has 6 features. #> Computing feature p-values for stat matrix 2 of 4: Mon Jul 22 13:53:12 2024 #>   This matrix has 7 features. #> Computing feature p-values for stat matrix 3 of 4: Mon Jul 22 13:53:12 2024 #>   This matrix has 6 features. #> Computing feature p-values for stat matrix 4 of 4: Mon Jul 22 13:53:12 2024 #>   This matrix has 7 features."},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://annaseffernick.github.io/BEAMR/news/index.html","id":"beamr-development-version-2024-07-09","dir":"Changelog","previous_headings":"","what":"BEAMR (development version), 2024-07-09","title":"BEAMR (development version), 2024-07-09","text":"Initial CRAN submission.","code":""}]
